document.addEventListener('DOMContentLoaded', function() {
	
	const objectTypes = {
		'53': {name: 'Отель', icon: `<svg xmlns="http://www.w3.org/2000/svg" width="31" height="28" viewBox="0 0 31 28" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M29.4194 12.3557H29.933C30.1328 12.3557 30.3325 12.4413 30.4609 12.5697C30.5893 12.6981 30.6749 12.8978 30.6749 13.0976V26.5804C30.6749 26.7802 30.5893 26.9799 30.4609 27.1083C30.3325 27.2367 30.1328 27.3224 29.933 27.3224H29.4194C29.2196 27.3224 29.0199 27.2367 28.8915 27.1083C28.7631 26.9799 28.6775 26.7802 28.6775 26.5804V23.4966H2.43936V26.5804C2.43936 26.7802 2.35375 26.9657 2.22534 27.1083C2.09694 27.2367 1.89719 27.3224 1.69744 27.3224H1.18381C0.984063 27.3224 0.784317 27.2367 0.655908 27.1083C0.5275 26.9799 0.441895 26.7802 0.441895 26.5804V9.53066C0.441895 9.33092 0.5275 9.13118 0.655908 9.00277C0.784317 8.87436 0.984063 8.78875 1.18381 8.78875H1.69744C1.89719 8.78875 2.08267 8.87436 2.22534 9.00277C2.35375 9.13118 2.43936 9.33092 2.43936 9.53066V14.8953C2.46789 14.8097 2.49643 14.7383 2.52496 14.6527C2.71044 14.1962 2.98153 13.7967 3.32395 13.4543C3.66637 13.1118 4.06586 12.8407 4.52243 12.6553C4.96472 12.4698 5.43555 12.3699 5.93492 12.3699C6.42002 12.3699 6.89085 12.4698 7.33314 12.641C7.53289 12.7266 7.71837 12.8122 7.88958 12.9264C7.90385 12.7123 7.96092 12.4983 8.04652 12.3129C8.16066 12.056 8.31761 11.8135 8.50309 11.628C8.50309 11.628 8.51735 11.6137 8.53162 11.5995C8.7171 11.414 8.94538 11.257 9.2022 11.1572C9.45901 11.0573 9.7301 11.0002 10.0155 11.0002H20.973C22.043 11.0002 23.056 11.2142 23.9834 11.5995C24.9536 11.999 25.8239 12.5839 26.5516 13.3116C27.2222 13.9822 27.7643 14.7669 28.1638 15.6372C28.3921 16.1223 28.5633 16.6359 28.6775 17.1638V13.0976C28.6775 12.8978 28.7631 12.6981 28.8915 12.5697C29.0199 12.4413 29.2196 12.3557 29.4194 12.3557ZM2.43936 17.2494V18.0199H2.79605C2.68191 17.8487 2.5963 17.6632 2.5107 17.4635C2.48216 17.3921 2.45363 17.3208 2.42509 17.2494H2.43936ZM7.31888 14.6955C6.96219 14.3388 6.47709 14.1248 5.94919 14.1248C5.6781 14.1248 5.43555 14.1819 5.20727 14.2675C4.96472 14.3674 4.75071 14.5101 4.5795 14.6955C4.39402 14.881 4.25134 15.095 4.15147 15.3233V15.3376C4.06586 15.5659 4.00879 15.8084 4.00879 16.0652C4.00879 16.3363 4.06586 16.5789 4.15147 16.8071C4.25134 17.0354 4.39402 17.2494 4.5795 17.4349C4.76498 17.6204 4.97899 17.7631 5.20727 17.8629H5.22154C5.44982 17.9486 5.69237 18.0056 5.94919 18.0056C6.22027 18.0056 6.46282 17.9486 6.6911 17.8629C6.91938 17.7631 7.1334 17.6204 7.31888 17.4349C7.67557 17.0782 7.88958 16.5931 7.88958 16.0652C7.88958 15.7941 7.83251 15.5516 7.7469 15.3233C7.64703 15.0808 7.50435 14.8667 7.31888 14.6955ZM9.01672 6.86263C8.77417 6.86263 8.56016 6.76276 8.40321 6.60581C8.24627 6.44887 8.1464 6.23485 8.1464 5.99231C8.1464 5.74976 8.24627 5.53574 8.40321 5.3788C8.56016 5.22185 8.78844 5.12198 9.01672 5.12198H12.0843C12.3268 5.12198 12.5408 5.22185 12.6978 5.3788C12.8547 5.53574 12.9546 5.76402 12.9546 5.99231C12.9546 6.10645 12.926 6.23485 12.8832 6.33472L12.869 6.36327C12.8262 6.46314 12.7548 6.54874 12.6835 6.62008L11.0285 8.27512H12.2555C12.498 8.27512 12.712 8.37499 12.869 8.53194C13.0259 8.68888 13.1258 8.91716 13.1258 9.14544C13.1258 9.38799 13.0259 9.60201 12.869 9.75895C12.712 9.91589 12.498 10.0158 12.2555 10.0158H8.90258C8.78844 10.0158 8.6743 9.98723 8.57442 9.94442C8.47455 9.90162 8.37468 9.84456 8.28907 9.75895L8.26054 9.73041C8.10359 9.5592 8.03226 9.34519 8.03226 9.14544C8.03226 8.91716 8.11786 8.70315 8.28907 8.53194L9.95838 6.86263H9.00245H9.01672ZM16.2504 1.74056C16.0078 1.74056 15.7938 1.64068 15.6369 1.48374C15.4799 1.3268 15.3801 1.11278 15.3801 0.870233C15.3801 0.627684 15.4799 0.413669 15.6369 0.256726C15.7938 0.099782 16.0221 -9.15527e-05 16.2504 -9.15527e-05H21.615C21.8576 -9.15527e-05 22.0716 0.099782 22.2285 0.256726C22.3855 0.413669 22.4853 0.641951 22.4853 0.870233C22.4853 0.984373 22.4568 1.11279 22.414 1.21266L22.3997 1.24119C22.3569 1.34107 22.2856 1.42667 22.2142 1.49801L18.1908 5.52147H21.9289C22.1714 5.52147 22.3855 5.62135 22.5424 5.77829C22.6993 5.93523 22.7992 6.16351 22.7992 6.3918C22.7992 6.63435 22.6993 6.84836 22.5424 7.0053C22.3855 7.16225 22.1714 7.26212 21.9289 7.26212H16.0792C15.965 7.26212 15.8509 7.23358 15.751 7.19078C15.6512 7.14798 15.5513 7.09091 15.4657 7.0053L15.4371 6.97677C15.2802 6.80556 15.2089 6.59154 15.2089 6.3918C15.2089 6.16351 15.2945 5.9495 15.4657 5.77829L19.4891 1.75483H16.2504V1.74056ZM28.6917 21.7275V19.7605H2.45363V21.7275H28.6917ZM20.9872 12.7409H10.0297C9.97265 12.7409 9.92985 12.7551 9.88704 12.7694C9.84424 12.7837 9.80144 12.8122 9.75863 12.855C9.7301 12.8836 9.70156 12.9264 9.67303 12.9834V12.9977C9.65876 13.0405 9.64449 13.0833 9.64449 13.1261V18.0199H27.051C26.9654 17.4349 26.7941 16.8642 26.5516 16.3363C26.252 15.6657 25.8239 15.0665 25.3103 14.5529C24.7396 13.9822 24.069 13.5256 23.3128 13.2117C22.5852 12.9121 21.8005 12.7409 20.973 12.7409H20.9872Z" fill="#ccc"/></svg>`},
		'51': {name: 'Ресторан', icon: `<svg xmlns="http://www.w3.org/2000/svg" width="25" height="29" viewBox="0 0 25 29" fill="none"><path d="M6.23346 0.95672C6.23346 0.71417 6.33333 0.500156 6.49027 0.343212C6.64722 0.186269 6.8755 0.0863953 7.10378 0.0863953C7.34633 0.0863953 7.56035 0.186269 7.71729 0.343212C7.87423 0.500156 7.9741 0.728438 7.9741 0.95672V8.71828H8.9443V0.95672C8.9443 0.71417 9.04418 0.500156 9.20112 0.343212C9.35806 0.186269 9.58634 0.0863953 9.81462 0.0863953C10.0572 0.0863953 10.2712 0.186269 10.4281 0.343212C10.5851 0.500156 10.6849 0.728438 10.6849 0.95672V9.58861C10.6849 10.2592 10.5423 10.9012 10.2997 11.5005C10.0429 12.114 9.67195 12.6704 9.21539 13.127C8.83016 13.5122 8.38787 13.8261 7.90277 14.0686C7.51754 14.2541 7.11805 14.3968 6.69002 14.4824V27.5658C6.69002 27.7655 6.60442 27.9653 6.47601 28.0937C6.3476 28.2221 6.14785 28.3077 5.94811 28.3077H5.43447C5.23473 28.3077 5.03498 28.2221 4.90657 28.0937C4.77816 27.9653 4.69256 27.7655 4.69256 27.5658V14.4824C4.26453 14.3968 3.85077 14.2541 3.47981 14.0686C2.99471 13.8261 2.55242 13.4979 2.16719 13.127C1.71063 12.6704 1.33967 12.114 1.08286 11.5005C0.840307 10.9155 0.697632 10.2735 0.697632 9.58861V0.95672C0.697632 0.71417 0.797505 0.500156 0.954449 0.343212C1.11139 0.186269 1.33967 0.0863953 1.56796 0.0863953C1.8105 0.0863953 2.02452 0.186269 2.18146 0.343212C2.33841 0.500156 2.43828 0.728438 2.43828 0.95672V8.71828H3.40847V0.95672C3.40847 0.71417 3.50835 0.500156 3.66529 0.343212C3.82224 0.186269 4.05052 0.0863953 4.2788 0.0863953C4.52135 0.0863953 4.73536 0.186269 4.8923 0.343212C5.04925 0.500156 5.14912 0.728438 5.14912 0.95672V8.71828H6.17639V0.95672H6.23346ZM20.7436 14.4824V27.58C20.7436 27.7798 20.658 27.9795 20.5296 28.108C20.4012 28.2364 20.2014 28.322 20.0017 28.322H19.4881C19.2883 28.322 19.0886 28.2364 18.9602 28.108C18.8317 27.9795 18.7461 27.7798 18.7461 27.58V14.4824C18.2896 14.3825 17.8615 14.2113 17.4621 13.983C16.9627 13.6977 16.5204 13.3125 16.1352 12.8416C15.6929 12.3137 15.3505 11.6859 15.1079 10.9726C14.8796 10.2877 14.7512 9.54581 14.7512 8.74683C14.7512 7.8765 14.9082 6.84924 15.1792 5.8077C15.4503 4.7947 15.8213 3.79596 16.2778 2.91137C16.7201 2.06959 17.2623 1.34194 17.8615 0.842576C18.4323 0.357478 19.0743 0.0863953 19.7591 0.0863953C20.444 0.0863953 21.086 0.371745 21.6567 0.842576C22.256 1.34194 22.7839 2.06959 23.2404 2.91137C23.697 3.7817 24.0822 4.7947 24.339 5.8077C24.6101 6.84924 24.7671 7.8765 24.7671 8.74683C24.7671 9.54581 24.6387 10.302 24.4104 10.9726C24.1678 11.6859 23.8254 12.3137 23.3831 12.8416C22.9979 13.2982 22.5556 13.6834 22.0562 13.983C21.6567 14.2113 21.2287 14.3825 20.7721 14.4824H20.7436ZM17.4763 11.7287C17.7759 12.0854 18.1184 12.3708 18.5179 12.5563C18.9031 12.7417 19.3168 12.8416 19.7449 12.8416C20.1872 12.8416 20.6009 12.7417 20.9719 12.5563C21.3571 12.3708 21.7138 12.0854 22.0134 11.7287C22.313 11.3578 22.5699 10.9155 22.7268 10.4019C22.8837 9.9025 22.9836 9.34606 22.9836 8.74683C22.9836 8.00491 22.8552 7.12032 22.6127 6.23573C22.3844 5.3654 22.0562 4.49508 21.6567 3.7389C21.3428 3.13966 20.9862 2.62603 20.6152 2.28361C20.3156 2.01252 20.016 1.8413 19.7306 1.8413C19.4453 1.8413 19.1456 1.99825 18.846 2.28361C18.4751 2.62603 18.1184 3.13966 17.8045 3.7389C17.405 4.49508 17.0768 5.3654 16.8486 6.23573C16.6203 7.12032 16.4776 8.00491 16.4776 8.74683C16.4776 9.34606 16.5632 9.9025 16.7344 10.4019C16.9056 10.9155 17.1482 11.3578 17.4478 11.7287H17.4763ZM8.84443 10.4732H2.59522C2.65229 10.6729 2.72363 10.8584 2.80924 11.0439C2.96618 11.3578 3.18019 11.6431 3.42274 11.8857C3.72236 12.1853 4.07905 12.4279 4.47854 12.5991C4.86377 12.756 5.27753 12.8416 5.71983 12.8416C6.16212 12.8416 6.57588 12.756 6.96111 12.5991C7.3606 12.4279 7.71729 12.1853 8.01691 11.8857C8.40213 11.5005 8.70175 11.0154 8.84443 10.4732Z" fill="#ccc"/></svg>`},
		'24': {name: 'Место', icon: `<svg xmlns="http://www.w3.org/2000/svg" width="36" height="27" viewBox="0 0 36 27" fill="none"><path d="M1.12714 0.10872C4.5371 0.893438 8.6319 2.363 12.0704 3.40453L22.9423 0.122988C23.0422 0.0944526 23.142 0.0944519 23.2419 0.0944519C23.3418 0.0944519 23.4417 0.10872 23.5415 0.122988L34.5989 3.46161C34.6988 3.49014 34.7987 3.54721 34.8843 3.60428C34.9699 3.66135 35.0412 3.74696 35.1126 3.83256C35.1696 3.91817 35.2267 4.00377 35.2552 4.10365C35.2838 4.20352 35.298 4.30339 35.298 4.40327V8.61221C35.298 8.85475 35.1982 9.06877 35.0412 9.22571C34.8843 9.38266 34.6703 9.48253 34.4277 9.48253C34.1852 9.48253 33.9711 9.38266 33.8142 9.22571C33.6573 9.06877 33.5574 8.85475 33.5574 8.61221V4.9597L24.1265 2.12045V4.13218C24.1265 4.37473 24.0266 4.58875 23.8697 4.74569C23.7127 4.90263 23.4987 5.00251 23.2562 5.00251C23.0136 5.00251 22.7996 4.90263 22.6427 4.74569C22.4857 4.58875 22.3859 4.37473 22.3859 4.13218V2.12045L12.955 4.9597V7.09984C12.955 7.34239 12.8551 7.55641 12.6982 7.71335C12.5412 7.87029 12.3272 7.97017 12.0847 7.97017C11.8421 7.97017 11.6281 7.87029 11.4711 7.71335C11.3142 7.55641 11.2143 7.34239 11.2143 7.09984V4.9597L1.78345 2.12045V9.66801C1.78345 9.91056 1.68358 10.1246 1.52663 10.2815C1.36969 10.4385 1.15568 10.5383 0.913126 10.5383C0.670577 10.5383 0.456563 10.4385 0.29962 10.2815C0.142676 10.1246 0.0428028 9.91056 0.0428028 9.66801V1.02185C0.0428028 0.979042 0.0428028 0.936242 0.0570704 0.879171C0.0570704 0.836369 0.071338 0.793566 0.0856056 0.750763C0.114141 0.65089 0.156944 0.565284 0.214014 0.493946C0.271084 0.40834 0.342422 0.337003 0.41376 0.279932C0.442295 0.265665 0.456563 0.251396 0.485098 0.237128C0.556436 0.194326 0.642042 0.151523 0.71338 0.137256C0.798985 0.10872 0.884591 0.0944519 0.970197 0.0944519H1.0558C1.08434 0.0944519 1.11287 0.10872 1.14141 0.10872H1.15568H1.12714ZM33.5574 13.3062C33.5574 13.0637 33.6573 12.8497 33.8142 12.6927C33.9711 12.5358 34.1994 12.4359 34.4277 12.4359C34.6703 12.4359 34.8843 12.5358 35.0412 12.6927C35.1982 12.8497 35.298 13.078 35.298 13.3062V25.9188C35.298 25.9616 35.298 26.0044 35.2838 26.0615C35.2838 26.1043 35.2695 26.1471 35.2552 26.2042C35.2267 26.304 35.1839 26.3896 35.1268 26.461C35.0698 26.5466 34.9984 26.6179 34.9271 26.675C34.8985 26.7035 34.8557 26.7321 34.8129 26.7463C34.7416 26.7891 34.6703 26.8177 34.5989 26.8319C34.5276 26.8462 34.442 26.8605 34.3706 26.8605C34.3278 26.8605 34.285 26.8605 34.228 26.8462C34.1852 26.8462 34.1424 26.8319 34.0996 26.8177L23.2419 23.5504L12.3843 26.8177C12.2987 26.8462 12.1703 26.8605 12.0561 26.8605C11.942 26.8605 11.8278 26.8462 11.728 26.8177L0.699112 23.4933L0.627774 23.4648L0.570704 23.4362C0.499366 23.3934 0.428028 23.3506 0.35669 23.3078C0.285352 23.2508 0.228282 23.1937 0.185479 23.1224C0.128408 23.0367 0.071338 22.9511 0.0428028 22.8513C0.0142676 22.7514 0 22.6515 0 22.5516V16.4308C0 16.1883 0.0998732 15.9743 0.256817 15.8173C0.41376 15.6604 0.642042 15.5605 0.870323 15.5605C1.11287 15.5605 1.32689 15.6604 1.48383 15.8173C1.64077 15.9743 1.74065 16.2026 1.74065 16.4308V21.9809L11.1715 24.8202V22.6373C11.1715 22.3947 11.2714 22.1807 11.4283 22.0237C11.5853 21.8668 11.8136 21.7669 12.0419 21.7669C12.2844 21.7669 12.4984 21.8668 12.6554 22.0237C12.8123 22.1807 12.9122 22.409 12.9122 22.6373V24.8202L22.3431 21.9809V6.9001C22.3431 6.65755 22.4429 6.44353 22.5999 6.28659C22.7568 6.12965 22.9851 6.02977 23.2134 6.02977C23.4559 6.02977 23.6699 6.12965 23.8269 6.28659C23.9838 6.44353 24.0837 6.67181 24.0837 6.9001V21.9809L33.5146 24.8202V13.3062H33.5574ZM11.2001 11.7939C11.2001 11.5513 11.2999 11.3373 11.4569 11.1804C11.6138 11.0234 11.8421 10.9236 12.0704 10.9236C12.3129 10.9236 12.527 11.0234 12.6839 11.1804C12.8408 11.3373 12.9407 11.5656 12.9407 11.7939V17.9432C12.9407 18.1858 12.8408 18.3998 12.6839 18.5567C12.527 18.7137 12.3129 18.8135 12.0704 18.8135C11.8278 18.8135 11.6138 18.7137 11.4569 18.5567C11.2999 18.3998 11.2001 18.1858 11.2001 17.9432V11.7939ZM1.76918 13.6629C1.76918 13.9055 1.66931 14.1195 1.51237 14.2764C1.35542 14.4334 1.14141 14.5333 0.898859 14.5333C0.656309 14.5333 0.442296 14.4334 0.285352 14.2764C0.128408 14.1195 0.0285352 13.9055 0.0285352 13.6629V12.6214C0.0285352 12.3789 0.128408 12.1648 0.285352 12.0079C0.442296 11.851 0.670577 11.7511 0.898859 11.7511C1.14141 11.7511 1.35542 11.851 1.51237 12.0079C1.66931 12.1648 1.76918 12.3931 1.76918 12.6214V13.6629Z" fill="#ccc"/></svg>`},
		'49': {name: 'Событие', icon: `<svg xmlns="http://www.w3.org/2000/svg" width="31" height="26" viewBox="0 0 31 26" fill="none"><path d="M6.43484 4.40248C6.43484 4.64503 6.33497 4.85904 6.17802 5.01599C6.02108 5.17293 5.80707 5.2728 5.56452 5.2728C5.32197 5.2728 5.10795 5.17293 4.95101 5.01599C4.79407 4.85904 4.69419 4.64503 4.69419 4.40248V3.48935H2.48272V7.19893H20.7024C20.945 7.19893 21.159 7.29881 21.3159 7.45575C21.4729 7.61269 21.5728 7.84097 21.5728 8.06925C21.5728 8.3118 21.4729 8.52582 21.3159 8.68276C21.159 8.8397 20.945 8.93958 20.7024 8.93958H2.48272V12.0356C2.48272 12.2782 2.38284 12.4922 2.2259 12.6492C2.06896 12.8061 1.85494 12.906 1.61239 12.906C1.36984 12.906 1.15583 12.8061 0.998887 12.6492C0.841944 12.4922 0.742071 12.2782 0.742071 12.0356V2.60476C0.742071 2.36222 0.841944 2.1482 0.998887 1.99126C1.15583 1.83431 1.38411 1.73444 1.61239 1.73444H4.69419V1.14947C4.69419 0.906919 4.79407 0.692905 4.95101 0.535961C5.10795 0.379018 5.33624 0.279144 5.56452 0.279144C5.80707 0.279144 6.02108 0.379018 6.17802 0.535961C6.33497 0.692905 6.43484 0.921187 6.43484 1.14947V1.73444H8.78899V1.14947C8.78899 0.906919 8.88887 0.692905 9.04581 0.535961C9.20275 0.379018 9.43104 0.279144 9.65932 0.279144C9.90187 0.279144 10.1159 0.379018 10.2728 0.535961C10.4298 0.692905 10.5296 0.921187 10.5296 1.14947V1.73444H12.8838V1.14947C12.8838 0.906919 12.9837 0.692905 13.1406 0.535961C13.2976 0.379018 13.5258 0.279144 13.7541 0.279144C13.9967 0.279144 14.2107 0.379018 14.3676 0.535961C14.5246 0.692905 14.6244 0.921187 14.6244 1.14947V1.73444H16.9786V1.14947C16.9786 0.906919 17.0785 0.692905 17.2354 0.535961C17.3924 0.379018 17.6206 0.279144 17.8489 0.279144C18.0915 0.279144 18.3055 0.379018 18.4624 0.535961C18.6194 0.692905 18.7192 0.921187 18.7192 1.14947V1.73444H21.0734V1.14947C21.0734 0.906919 21.1733 0.692905 21.3302 0.535961C21.4872 0.379018 21.7154 0.279144 21.9437 0.279144C22.1863 0.279144 22.4003 0.379018 22.5572 0.535961C22.7142 0.692905 22.814 0.921187 22.814 1.14947V1.73444H25.1682V1.14947C25.1682 0.906919 25.2681 0.692905 25.425 0.535961C25.582 0.379018 25.8102 0.279144 26.0385 0.279144C26.2811 0.279144 26.4951 0.379018 26.652 0.535961C26.809 0.692905 26.9088 0.921187 26.9088 1.14947V1.73444H29.9906C30.2332 1.73444 30.4472 1.83431 30.6041 1.99126C30.7611 2.1482 30.861 2.37648 30.861 2.60476V24.5483C30.861 24.7909 30.7611 25.0049 30.6041 25.1618C30.4472 25.3188 30.2332 25.4187 29.9906 25.4187H1.49825C1.2557 25.4187 1.04169 25.3188 0.884746 25.1618C0.727803 25.0049 0.62793 24.7909 0.62793 24.5483V17.5572C0.62793 17.3147 0.727803 17.1006 0.884746 16.9437C1.04169 16.7868 1.26997 16.6869 1.49825 16.6869C1.7408 16.6869 1.95482 16.7868 2.11176 16.9437C2.2687 17.1006 2.36858 17.3289 2.36858 17.5572V23.6637H29.1061V3.47509H26.8946V4.38821C26.8946 4.63076 26.7947 4.84478 26.6378 5.00172C26.4808 5.15866 26.2668 5.25854 26.0243 5.25854C25.7817 5.25854 25.5677 5.15866 25.4107 5.00172C25.2538 4.84478 25.1539 4.63076 25.1539 4.38821V3.47509H22.7998V4.38821C22.7998 4.63076 22.6999 4.84478 22.543 5.00172C22.386 5.15866 22.172 5.25854 21.9294 5.25854C21.6869 5.25854 21.4729 5.15866 21.3159 5.00172C21.159 4.84478 21.0591 4.63076 21.0591 4.38821V3.47509H18.705V4.38821C18.705 4.63076 18.6051 4.84478 18.4482 5.00172C18.2912 5.15866 18.0772 5.25854 17.8347 5.25854C17.5921 5.25854 17.3781 5.15866 17.2211 5.00172C17.0642 4.84478 16.9643 4.63076 16.9643 4.38821V3.47509H14.6102V4.38821C14.6102 4.63076 14.5103 4.84478 14.3534 5.00172C14.1964 5.15866 13.9824 5.25854 13.7399 5.25854C13.4973 5.25854 13.2833 5.15866 13.1263 5.00172C12.9694 4.84478 12.8695 4.63076 12.8695 4.38821V3.47509H10.5154V4.38821C10.5154 4.63076 10.4155 4.84478 10.2586 5.00172C10.1016 5.15866 9.8876 5.25854 9.64505 5.25854C9.4025 5.25854 9.18849 5.15866 9.03154 5.00172C8.8746 4.84478 8.77473 4.63076 8.77473 4.38821V3.47509H6.42057V4.38821L6.43484 4.40248ZM23.4704 16.7868H26.9659C27.2085 16.7868 27.4225 16.8866 27.5794 17.0436C27.7364 17.2005 27.8362 17.4288 27.8362 17.6571V21.1526C27.8362 21.3952 27.7364 21.6092 27.5794 21.7661C27.4225 21.9231 27.2085 22.023 26.9659 22.023H23.4704C23.2278 22.023 23.0138 21.9231 22.8568 21.7661C22.6999 21.6092 22.6 21.3952 22.6 21.1526V17.6571C22.6 17.4145 22.6999 17.2005 22.8568 17.0436C23.0138 16.8866 23.2421 16.7868 23.4704 16.7868ZM26.0956 18.5417H24.3549V20.2823H26.0956V18.5417ZM17.1498 16.7868H20.6454C20.8879 16.7868 21.1019 16.8866 21.2589 17.0436C21.4158 17.2005 21.5157 17.4288 21.5157 17.6571V21.1526C21.5157 21.3952 21.4158 21.6092 21.2589 21.7661C21.1019 21.9231 20.8879 22.023 20.6454 22.023H17.1498C16.9073 22.023 16.6932 21.9231 16.5363 21.7661C16.3794 21.6092 16.2795 21.3952 16.2795 21.1526V17.6571C16.2795 17.4145 16.3794 17.2005 16.5363 17.0436C16.6932 16.8866 16.9215 16.7868 17.1498 16.7868ZM19.775 18.5417H18.0344V20.2823H19.775V18.5417ZM10.8293 16.7868H14.3248C14.5674 16.7868 14.7814 16.8866 14.9383 17.0436C15.0953 17.2005 15.1951 17.4288 15.1951 17.6571V21.1526C15.1951 21.3952 15.0953 21.6092 14.9383 21.7661C14.7814 21.9231 14.5674 22.023 14.3248 22.023H10.8293C10.5867 22.023 10.3727 21.9231 10.2158 21.7661C10.0588 21.6092 9.95894 21.3952 9.95894 21.1526V17.6571C9.95894 17.4145 10.0588 17.2005 10.2158 17.0436C10.3727 16.8866 10.601 16.7868 10.8293 16.7868ZM13.4545 18.5417H11.7139V20.2823H13.4545V18.5417ZM4.50872 16.7868H8.00428C8.24683 16.7868 8.46084 16.8866 8.61778 17.0436C8.77473 17.2005 8.8746 17.4288 8.8746 17.6571V21.1526C8.8746 21.3952 8.77473 21.6092 8.61778 21.7661C8.46084 21.9231 8.24683 22.023 8.00428 22.023H4.50872C4.26617 22.023 4.05215 21.9231 3.89521 21.7661C3.73827 21.6092 3.63839 21.3952 3.63839 21.1526V17.6571C3.63839 17.4145 3.73827 17.2005 3.89521 17.0436C4.05215 16.8866 4.28043 16.7868 4.50872 16.7868ZM7.13395 18.5417H5.39331V20.2823H7.13395V18.5417ZM23.4846 10.4091H26.9802C27.2227 10.4091 27.4367 10.509 27.5937 10.666C27.7506 10.8229 27.8505 11.0512 27.8505 11.2795V14.775C27.8505 15.0176 27.7506 15.2316 27.5937 15.3885C27.4367 15.5455 27.2227 15.6453 26.9802 15.6453H23.4846C23.2421 15.6453 23.0281 15.5455 22.8711 15.3885C22.7142 15.2316 22.6143 15.0176 22.6143 14.775V11.2795C22.6143 11.0369 22.7142 10.8229 22.8711 10.666C23.0281 10.509 23.2563 10.4091 23.4846 10.4091ZM26.1099 12.1641H24.3692V13.9047H26.1099V12.1641ZM17.1641 10.4091H20.6596C20.9022 10.4091 21.1162 10.509 21.2731 10.666C21.4301 10.8229 21.53 11.0512 21.53 11.2795V14.775C21.53 15.0176 21.4301 15.2316 21.2731 15.3885C21.1162 15.5455 20.9022 15.6453 20.6596 15.6453H17.1641C16.9215 15.6453 16.7075 15.5455 16.5506 15.3885C16.3936 15.2316 16.2937 15.0176 16.2937 14.775V11.2795C16.2937 11.0369 16.3936 10.8229 16.5506 10.666C16.7075 10.509 16.9358 10.4091 17.1641 10.4091ZM19.7893 12.1641H18.0487V13.9047H19.7893V12.1641ZM10.8435 10.4091H14.3391C14.5816 10.4091 14.7957 10.509 14.9526 10.666C15.1095 10.8229 15.2094 11.0512 15.2094 11.2795V14.775C15.2094 15.0176 15.1095 15.2316 14.9526 15.3885C14.7957 15.5455 14.5816 15.6453 14.3391 15.6453H10.8435C10.601 15.6453 10.387 15.5455 10.23 15.3885C10.0731 15.2316 9.97321 15.0176 9.97321 14.775V11.2795C9.97321 11.0369 10.0731 10.8229 10.23 10.666C10.387 10.509 10.6152 10.4091 10.8435 10.4091ZM13.4688 12.1641H11.7281V13.9047H13.4688V12.1641ZM4.52298 10.4091H8.01854C8.26109 10.4091 8.47511 10.509 8.63205 10.666C8.78899 10.8229 8.88887 11.0512 8.88887 11.2795V14.775C8.88887 15.0176 8.78899 15.2316 8.63205 15.3885C8.47511 15.5455 8.26109 15.6453 8.01854 15.6453H4.52298C4.28043 15.6453 4.06642 15.5455 3.90948 15.3885C3.75253 15.2316 3.65266 15.0176 3.65266 14.775V11.2795C3.65266 11.0369 3.75253 10.8229 3.90948 10.666C4.06642 10.509 4.2947 10.4091 4.52298 10.4091ZM7.14822 12.1641H5.40757V13.9047H7.14822V12.1641ZM23.8984 8.93958C23.6558 8.93958 23.4418 8.8397 23.2849 8.68276C23.1279 8.52582 23.0281 8.3118 23.0281 8.06925C23.0281 7.8267 23.1279 7.61269 23.2849 7.45575C23.4418 7.29881 23.6701 7.19893 23.8984 7.19893H26.6378C26.8803 7.19893 27.0943 7.29881 27.2513 7.45575C27.4082 7.61269 27.5081 7.84097 27.5081 8.06925C27.5081 8.3118 27.4082 8.52582 27.2513 8.68276C27.0943 8.8397 26.8803 8.93958 26.6378 8.93958H23.8984ZM2.49698 14.9177C2.49698 15.1603 2.39711 15.3743 2.24017 15.5312C2.08322 15.6882 1.86921 15.788 1.62666 15.788C1.38411 15.788 1.1701 15.6882 1.01315 15.5312C0.856211 15.3743 0.756338 15.1603 0.756338 14.9177V14.6323C0.756338 14.3898 0.856211 14.1758 1.01315 14.0188C1.1701 13.8619 1.39838 13.762 1.62666 13.762C1.86921 13.762 2.08322 13.8619 2.24017 14.0188C2.39711 14.1758 2.49698 14.4041 2.49698 14.6323V14.9177Z" fill="#ccc"/></svg>`},
		'52': {name: 'Кемпинг', icon: `<svg xmlns="http://www.w3.org/2000/svg" width="37" height="23" viewBox="0 0 37 23" fill="none"><path d="M27.3644 9.36711C27.5001 9.36711 27.681 9.41109 27.7715 9.49904C27.8619 9.587 27.9976 9.67495 28.0428 9.85086L28.9021 11.8738C28.9021 11.8298 28.8569 11.7419 28.8569 11.6979C28.8569 11.522 28.9474 11.3461 29.083 11.2141L32.2036 8.17973L32.2489 8.13576C32.3845 8.00382 32.5654 7.95985 32.7011 7.95985C32.882 7.95985 33.0629 8.0478 33.1986 8.17973L36.3192 11.2141C36.4549 11.3461 36.5453 11.522 36.5453 11.6979C36.5453 11.8738 36.4549 12.0497 36.3192 12.1816L36.274 12.2256C36.1383 12.3576 35.9574 12.4015 35.8217 12.4015C35.6408 12.4015 35.4599 12.3136 35.3242 12.1816L33.47 10.3786V11.566L36.3644 14.3805C36.5001 14.5124 36.5906 14.6883 36.5906 14.8642C36.5906 15.0402 36.5001 15.2161 36.3644 15.348C36.2288 15.4799 36.0479 15.5679 35.867 15.5679C35.6861 15.5679 35.5051 15.4799 35.3695 15.348L33.5152 13.5449V14.8642L36.4097 17.6788C36.5453 17.8107 36.6358 17.9866 36.6358 18.1625C36.6358 18.3384 36.5453 18.5143 36.4097 18.6463C36.274 18.7782 36.0931 18.8662 35.9122 18.8662C35.7313 18.8662 35.5504 18.7782 35.4147 18.6463L33.5604 16.8432V21.6367H35.7765C35.9574 21.6367 36.1383 21.7247 36.274 21.8566L36.3192 21.9006C36.4097 22.0325 36.5001 22.1644 36.5001 22.3403C36.5001 22.5163 36.4097 22.6922 36.274 22.8241C36.1383 22.956 35.9574 23.044 35.7765 23.044H2.35439C2.17349 23.044 1.99258 22.956 1.85691 22.8241C1.72123 22.6922 1.63078 22.5163 1.63078 22.3403C1.63078 22.1644 1.72123 21.9885 1.85691 21.8566C1.99258 21.7247 2.17349 21.6367 2.35439 21.6367H3.62073V14.7323L1.76645 16.5354C1.58555 16.7113 1.40464 16.7553 1.22374 16.7553C1.04284 16.7553 0.861931 16.7113 0.726253 16.5794C0.590574 16.4034 0.500122 16.2275 0.500122 16.0516C0.500122 15.8757 0.590574 15.6998 0.726253 15.5679L3.62073 12.7533V11.566L1.76645 13.369C1.63078 13.501 1.44987 13.5889 1.26897 13.5889C1.08806 13.5889 0.907157 13.501 0.771479 13.369C0.590574 13.2371 0.500122 13.0612 0.500122 12.8853C0.500122 12.7094 0.590574 12.5335 0.726253 12.4015L3.62073 9.587V8.26769L1.76645 10.0707L1.72123 10.1147C1.58555 10.2467 1.40464 10.2906 1.26897 10.2906C1.08806 10.2906 0.907157 10.2027 0.771479 10.0707L0.726253 10.0268C0.590574 9.89484 0.545348 9.71893 0.545348 9.587C0.545348 9.41109 0.6358 9.23518 0.771479 9.10325L3.66595 6.28872V5.10134L1.81168 6.9044L1.76645 6.94838C1.63078 7.08031 1.44987 7.12428 1.31419 7.12428C1.13329 7.12428 0.952383 7.03633 0.816705 6.9044C0.545348 6.77247 0.500122 6.59656 0.500122 6.42065C0.500122 6.24474 0.590574 6.06883 0.726253 5.9369L3.84686 2.90249L3.89208 2.85851C4.02776 2.72658 4.20866 2.6826 4.34434 2.6826C4.52525 2.6826 4.70615 2.77055 4.84183 2.90249L7.96243 5.9369L8.00766 5.98088C8.14334 6.11281 8.18856 6.28872 8.18856 6.42065C8.18856 6.59656 8.09811 6.77247 7.96243 6.9044L7.91721 6.94838C7.78153 7.08031 7.60062 7.12428 7.46495 7.12428C7.28404 7.12428 7.10314 7.03633 6.96746 6.9044L5.02274 5.05736V6.24474L7.91721 9.05927C8.05289 9.19121 8.14334 9.36711 8.14334 9.54302C8.14334 9.71893 8.05289 9.89484 7.91721 10.0268L7.87198 10.1147C7.7363 10.2467 7.5554 10.2906 7.41972 10.2906C7.23882 10.2906 7.05791 10.2027 6.92223 10.0707L5.02274 8.26769V9.587L7.91721 12.4015L7.96243 12.4455C8.09811 12.5774 8.14334 12.7533 8.14334 12.8853C8.14334 13.0612 8.05289 13.2371 7.91721 13.369C7.78153 13.501 7.60063 13.5889 7.41972 13.5889C7.23882 13.5889 7.05791 13.501 6.92223 13.369L5.02274 11.566V12.7533L7.91721 15.5679L7.96243 15.6119C8.09811 15.7438 8.14334 15.9197 8.14334 16.0516C8.14334 16.2275 8.05289 16.4034 7.91721 16.5354C7.78153 16.6673 7.60063 16.7553 7.41972 16.7553C7.23882 16.7553 7.05791 16.6673 6.92223 16.5354L5.02274 14.7323V21.5927H6.46997L11.4901 9.85086C11.5353 9.71893 11.6258 9.587 11.7614 9.49904L11.8067 9.45507C11.8971 9.36711 12.0328 9.32314 12.2137 9.32314H27.3644V9.36711ZM16.0579 0C16.5102 0 16.9624 0.0879541 17.3695 0.263862H17.4147C17.8217 0.439771 18.1835 0.659656 18.5001 0.967495C18.8167 1.27533 19.0881 1.62715 19.2237 2.06692C19.4046 2.46272 19.4951 2.90249 19.4951 3.34226C19.4951 3.78203 19.4046 4.2218 19.2237 4.61759V4.66157C19.0428 5.05736 18.8167 5.40918 18.5001 5.71702C18.1835 6.02486 17.8217 6.28872 17.3695 6.42065C16.9624 6.59656 16.5102 6.68451 16.0579 6.68451C15.6057 6.68451 15.1534 6.59656 14.7464 6.42065H14.7011C14.2941 6.24474 13.9323 6.02486 13.6157 5.71702C13.2991 5.40918 13.0278 5.05736 12.8469 4.61759C12.666 4.2218 12.5755 3.78203 12.5755 3.34226C12.5755 2.90249 12.666 2.46272 12.8469 2.06692V2.02294C13.0278 1.62715 13.2539 1.27533 13.5705 0.967495C13.8871 0.659656 14.2489 0.395794 14.7011 0.263862C15.1534 0.0879541 15.6057 0 16.0579 0ZM17.5051 1.97897C17.3242 1.80306 17.0981 1.67113 16.872 1.5392C16.6459 1.45124 16.3745 1.40727 16.1031 1.40727C15.8318 1.40727 15.5604 1.45124 15.3343 1.5392H15.2891C15.0629 1.62715 14.8368 1.75908 14.6559 1.93499C14.475 2.1109 14.2941 2.33078 14.2036 2.59465C14.1132 2.85851 14.068 3.07839 14.068 3.34226C14.068 3.60612 14.1132 3.86998 14.2036 4.08987C14.2941 4.30975 14.475 4.52964 14.6559 4.70554L14.7011 4.74952C14.882 4.92543 15.1082 5.05736 15.3343 5.14532C15.5604 5.23327 15.8318 5.27725 16.1031 5.27725C16.3745 5.27725 16.6459 5.23327 16.872 5.14532C17.0981 5.05736 17.3242 4.88145 17.5051 4.70554C17.6861 4.52964 17.8217 4.30975 17.9574 4.08987C18.0479 3.86998 18.0931 3.60612 18.0931 3.34226C18.0931 3.07839 18.0479 2.81453 17.9574 2.59465C17.8217 2.37476 17.6861 2.15488 17.5051 1.97897ZM28.9926 12.0057L29.7162 13.7208L31.9775 11.522V10.3346L30.1232 12.1377L30.078 12.1816C29.9423 12.3136 29.7614 12.3576 29.6258 12.3576C29.4448 12.3576 29.2639 12.2696 29.1283 12.1377L29.083 12.0937C29.0378 12.0937 28.9926 12.0497 28.9926 12.0057ZM31.9775 19.0421V16.8432L31.2991 17.5029C31.5705 18.1185 31.7966 18.6023 31.9775 19.0421ZM30.2137 18.5583L30.1232 18.6463C29.9876 18.7782 29.8067 18.8662 29.6258 18.8662C29.4448 18.8662 29.2639 18.7782 29.1283 18.6463C28.9926 18.5143 28.9021 18.3384 28.9021 18.1625C28.9021 17.9866 28.9926 17.8107 29.1283 17.6788L29.6258 17.195L26.9122 10.8184H13.2991L17.9122 21.6367H23.9273L21.7112 16.4914C21.6207 16.3155 21.6207 16.1396 21.7112 15.9637C21.8016 15.7878 21.9373 15.6558 22.1182 15.5679C22.2991 15.4799 22.48 15.4799 22.6609 15.5679C22.8418 15.6558 22.9775 15.7878 23.068 15.9637L25.4649 21.6367H31.5252L30.2137 18.5583ZM30.7112 16.0516L31.9775 14.8203V13.501L30.3041 15.1281L30.7112 16.0516ZM20.2639 13.0172C20.1735 12.8413 20.2187 12.6654 20.2639 12.4895C20.3544 12.3136 20.4901 12.1816 20.671 12.0937C20.8519 12.0057 21.0328 12.0057 21.2137 12.0937C21.3946 12.1816 21.5303 12.3136 21.6207 12.4895L22.2539 13.9407C22.3443 14.1166 22.2991 14.2925 22.2539 14.4685C22.1634 14.6444 22.0278 14.7763 21.8469 14.8642C21.666 14.9522 21.485 14.9082 21.3041 14.8642C21.1232 14.7763 20.9876 14.6444 20.8971 14.4685L20.2639 13.0172ZM11.4901 21.6367V13.5889L8.05289 21.6367H11.4901ZM12.9373 13.5889V21.6367H16.3745L12.9373 13.5889Z" fill="white"/></svg>`},
		'50': {name: 'Экскурсия', icon: `<svg xmlns="http://www.w3.org/2000/svg" width="36" height="24" viewBox="0 0 36 24" fill="none"><path d="M8.36041 20.5C8.36041 20.6998 8.34614 20.8852 8.30334 21.0707C8.26054 21.2705 8.20347 21.4559 8.13213 21.6272C8.06079 21.7984 7.96092 21.9696 7.86105 22.1408C7.7469 22.2977 7.63276 22.4547 7.49009 22.5831C7.36168 22.7115 7.20474 22.8399 7.04779 22.9541C6.89085 23.0539 6.71964 23.1538 6.53416 23.2251C6.36295 23.2965 6.17747 23.3535 5.97772 23.3963C5.79224 23.4392 5.60676 23.4534 5.40702 23.4534C5.23581 23.4534 5.05033 23.4534 4.86485 23.4677C4.46536 23.482 4.06586 23.4962 3.69491 23.4677C3.6093 23.4677 3.53796 23.4534 3.45236 23.4249C3.36675 23.4106 3.29541 23.3821 3.22408 23.3535C3.15274 23.325 3.0814 23.2822 3.01006 23.2394C2.93872 23.1966 2.88165 23.1395 2.82458 23.0825C2.76751 23.0254 2.71044 22.9541 2.65337 22.8827C2.61057 22.8114 2.56777 22.74 2.52496 22.6544C2.48216 22.5403 2.45363 22.4547 2.43936 22.3691C2.42509 22.2835 2.42509 22.1979 2.42509 22.0837L2.43936 20.4144C2.43936 20.3003 2.46789 20.1861 2.5107 20.072C2.5535 19.9579 2.62484 19.8723 2.71044 19.7866C2.79605 19.701 2.88165 19.644 2.99579 19.6012C3.09567 19.5584 3.20981 19.5298 3.33822 19.5298C3.46662 19.5298 3.58077 19.5584 3.68064 19.6012C3.79478 19.644 3.88039 19.7153 3.96599 19.8009C4.0516 19.8865 4.10867 19.9864 4.15147 20.0863C4.19427 20.1861 4.22281 20.3003 4.22281 20.4287V21.7128L5.39275 21.6985C5.46409 21.6985 5.54969 21.6842 5.62103 21.67C5.69237 21.6557 5.76371 21.6272 5.83505 21.5986C5.90638 21.5701 5.97772 21.5273 6.04906 21.4845C6.1204 21.4417 6.17747 21.3846 6.23454 21.3276C6.29161 21.2705 6.34868 21.2134 6.39148 21.1421C6.43429 21.085 6.47709 21.0137 6.50562 20.9423C6.53416 20.871 6.56269 20.7854 6.57696 20.714C6.59123 20.6427 6.6055 20.5571 6.6055 20.4858L6.63403 13.7657L4.27988 13.78V15.1211C4.27988 15.2353 4.25134 15.3494 4.20854 15.4636C4.16574 15.5777 4.0944 15.6633 4.00879 15.7489C3.92319 15.8345 3.82331 15.8916 3.72344 15.9344C3.62357 15.9772 3.50943 16.0057 3.38102 16.0057C3.25261 16.0057 3.13847 15.9772 3.0386 15.9344C2.92446 15.8916 2.83885 15.8203 2.75325 15.7347C2.66764 15.6491 2.61057 15.5492 2.56777 15.4493C2.52496 15.3494 2.49643 15.2353 2.49643 15.1069V13.7657L2.38229 13.7515C2.22534 13.7229 2.08267 13.6801 1.93999 13.623C1.79732 13.566 1.65464 13.4946 1.52623 13.409C1.39782 13.3234 1.26942 13.2236 1.16954 13.1237C1.0554 13.0095 0.955528 12.8954 0.869923 12.767C0.784317 12.6386 0.712979 12.5102 0.655909 12.3675C0.598838 12.2248 0.556036 12.0822 0.513233 11.9252C0.484698 11.7825 0.47043 11.6256 0.47043 11.4686L0.441895 8.81487C0.441895 8.65792 0.456162 8.50099 0.484698 8.35831C0.513233 8.20137 0.556035 8.05868 0.613106 7.916C0.670176 7.77332 0.741514 7.64493 0.82712 7.50225C0.912726 7.37384 1.0126 7.24543 1.11247 7.14556C1.22661 7.03142 1.34075 6.93154 1.46916 6.84593C1.59757 6.76032 1.72598 6.689 1.86865 6.63193C2.01133 6.57485 2.15401 6.53204 2.31095 6.48924C2.45363 6.46071 2.61057 6.44644 2.76751 6.44644H3.05286C3.16701 6.44644 3.28115 6.47499 3.39529 6.50352C3.50943 6.54632 3.59503 6.61765 3.68064 6.68899C3.76624 6.77459 3.82331 6.86021 3.88039 6.97436C3.92319 7.07423 3.95172 7.18835 3.95172 7.31676C3.95172 7.4309 3.92319 7.54505 3.89465 7.65919C3.85185 7.77333 3.78051 7.85894 3.70917 7.94454C3.62357 8.03015 3.53796 8.08722 3.42382 8.14429C3.32395 8.18709 3.20981 8.21563 3.09567 8.21563H2.81032C2.78178 8.21563 2.73898 8.21562 2.71044 8.22989C2.68191 8.24416 2.6391 8.24416 2.61057 8.25843C2.58203 8.2727 2.53923 8.28696 2.5107 8.31549C2.48216 8.34403 2.45363 8.3583 2.42509 8.38683C2.39656 8.41537 2.36802 8.4439 2.35375 8.47243C2.33948 8.50097 2.31095 8.52952 2.29668 8.57232C2.28241 8.60085 2.26815 8.64365 2.26815 8.67218C2.26815 8.71498 2.25388 8.74352 2.25388 8.78632L2.28241 11.4401C2.28241 11.4686 2.28241 11.5114 2.29668 11.54C2.31095 11.5685 2.31095 11.6113 2.32522 11.6398C2.33948 11.6684 2.35375 11.7112 2.38229 11.7397C2.41082 11.7683 2.42509 11.7968 2.45363 11.8253C2.48216 11.8539 2.5107 11.8681 2.53923 11.8967C2.56777 11.9109 2.58203 11.9252 2.61057 11.9395L2.89592 11.9965L6.80524 11.9252L6.77671 8.17283L5.86358 8.18709C5.74944 8.18709 5.6353 8.15856 5.52116 8.13003C5.40702 8.08722 5.32141 8.01588 5.23581 7.94454C5.1502 7.85894 5.09313 7.77333 5.03606 7.65919C4.99326 7.55932 4.96472 7.44517 4.96472 7.31676C4.96472 7.20262 4.99326 7.0885 5.02179 6.97436C5.0646 6.86021 5.13593 6.77459 5.20727 6.68899C5.29288 6.60338 5.37848 6.54631 5.49262 6.48924C5.5925 6.44644 5.70664 6.41792 5.82078 6.41792L6.84805 6.40364L6.86231 6.37512C6.89085 6.30378 6.91938 6.23242 6.96219 6.17535C7.00499 6.10401 7.04779 6.04696 7.10486 5.98989C7.14766 5.93282 7.20474 5.89001 7.26181 5.8472C7.29034 5.81867 7.31888 5.80441 7.34741 5.79014C10.2295 4.36338 15.5227 2.79394 18.7615 1.60973C19.1039 1.09609 19.6318 0.753674 20.2025 0.610998C20.6448 0.496857 21.1014 0.482583 21.5294 0.582457C21.9717 0.68233 22.3712 0.896347 22.6851 1.21023C23.0275 1.56692 23.2558 2.06629 23.2558 2.67979L23.2986 7.03142C23.3557 7.04568 23.3985 7.04569 23.4555 7.05996C23.6267 7.10276 23.7837 7.14556 23.9406 7.2169C24.1261 7.28824 24.2973 7.38812 24.4543 7.48799C24.6112 7.60213 24.7681 7.71626 24.9108 7.85894C25.0535 8.00162 25.1819 8.15855 25.296 8.31549C25.4102 8.47243 25.5101 8.65793 25.5814 8.84341C25.6527 9.00035 25.7098 9.17155 25.7383 9.34276C25.7526 9.39983 25.7669 9.45691 25.7669 9.51399H25.8382L25.8097 10.0704C25.8097 10.2559 25.7811 10.4556 25.7526 10.6269C25.7098 10.8266 25.6527 11.0121 25.5814 11.1833C25.5101 11.3688 25.4102 11.54 25.3103 11.6969C25.1962 11.8539 25.082 12.0108 24.9394 12.1535C24.7967 12.2962 24.654 12.4246 24.4971 12.5244C24.3401 12.6386 24.1689 12.7242 23.9834 12.8098C23.8265 12.8811 23.6695 12.9382 23.4983 12.981C23.4413 12.9953 23.3985 13.0095 23.3414 13.0095L23.3842 17.3754C23.3842 18.0175 23.1844 18.5168 22.8563 18.8878C22.5567 19.2302 22.1572 19.4442 21.7149 19.5441C21.2869 19.644 20.8303 19.6297 20.388 19.5156C19.8173 19.3586 19.2751 19.0305 18.9184 18.5168L8.38895 14.9357L8.36041 20.4572V20.5ZM31.1458 2.2803C31.3598 2.1519 31.5881 2.13763 31.8021 2.1947C32.0161 2.25177 32.2158 2.39445 32.33 2.59419C32.4584 2.80821 32.4726 3.0365 32.4156 3.25051C32.3585 3.46453 32.2158 3.66426 32.0161 3.77841L27.322 6.53204C27.108 6.66045 26.8797 6.67474 26.6657 6.61767C26.4517 6.5606 26.252 6.41792 26.1378 6.21817C26.0094 6.00416 25.9952 5.77587 26.0522 5.56185C26.1093 5.34784 26.252 5.1481 26.4517 5.03396L31.1458 2.2803ZM32.0304 16.3767C32.2444 16.5051 32.3728 16.6906 32.4298 16.9046C32.4869 17.1186 32.4584 17.3612 32.3442 17.5609C32.2158 17.7749 32.0304 17.9033 31.8163 17.9604C31.6023 18.0175 31.3598 17.9889 31.16 17.8748L26.466 15.1211C26.252 14.9927 26.1236 14.8073 26.0665 14.5932C26.0094 14.3792 26.038 14.1367 26.1521 13.9369C26.2805 13.7229 26.466 13.5945 26.68 13.5374C26.894 13.4804 27.1366 13.5089 27.3363 13.623L32.0304 16.3767ZM28.5919 10.955C28.3493 10.955 28.1353 10.8551 27.9784 10.6982C27.8214 10.5413 27.7215 10.3272 27.7215 10.0847C27.7215 9.84213 27.8214 9.62813 27.9784 9.47118C28.1353 9.31424 28.3636 9.21436 28.5919 9.21436H34.5985C34.8411 9.21436 35.0551 9.31424 35.212 9.47118C35.369 9.62813 35.4688 9.8564 35.4688 10.0847C35.4688 10.3272 35.369 10.5413 35.212 10.6982C35.0551 10.8551 34.8411 10.955 34.5985 10.955H28.5919ZM4.23708 17.9319C4.23708 18.046 4.20854 18.1601 4.16574 18.26C4.12293 18.3741 4.0516 18.4598 3.96599 18.5454C3.88039 18.631 3.78051 18.688 3.68064 18.7308C3.58077 18.7736 3.46662 18.8022 3.33822 18.8022C3.20981 18.8022 3.09567 18.7736 2.99579 18.7308C2.88165 18.688 2.79605 18.6167 2.71044 18.5311C2.62484 18.4455 2.56777 18.3456 2.52496 18.2457C2.48216 18.1459 2.45363 18.0317 2.45363 17.9033V17.6751C2.45363 17.5609 2.48216 17.4468 2.52496 17.3469C2.56777 17.2327 2.6391 17.1471 2.72471 17.0615C2.81032 16.9759 2.89592 16.9188 3.01006 16.876C3.10993 16.8332 3.22408 16.8047 3.35248 16.8047C3.46663 16.8047 3.59503 16.8332 3.69491 16.876C3.80905 16.9188 3.89465 16.9902 3.98026 17.0758C4.06586 17.1614 4.12293 17.247 4.16574 17.3612C4.20854 17.461 4.23708 17.5752 4.23708 17.7036V17.9319ZM23.6553 9.1573C23.5982 9.10022 23.5411 9.04315 23.4698 9.00035C23.4127 8.97182 23.3557 8.929 23.2986 8.90047L23.3128 11.1833C23.3699 11.1548 23.427 11.1262 23.4841 11.0834C23.5554 11.0406 23.6125 10.9835 23.6695 10.9265C23.7266 10.8694 23.7837 10.8123 23.8265 10.741C23.8693 10.6697 23.9121 10.5983 23.9406 10.527C23.9692 10.4556 23.9977 10.37 24.012 10.2987C24.0262 10.2274 24.0405 10.156 24.0405 10.0704V9.92774C24.0405 9.87067 24.0262 9.79932 24.012 9.74225C23.9977 9.68518 23.9692 9.61386 23.9406 9.55679C23.9121 9.48545 23.8693 9.39983 23.8265 9.34276C23.7837 9.27142 23.7266 9.21437 23.6695 9.1573H23.6553ZM18.4619 9.05741L18.4191 3.63572L8.50309 7.2597L8.54589 13.1522L18.5047 16.5336L18.4476 9.05741H18.4619ZM20.1882 2.60845L20.2311 9.04315L20.3024 17.4182C20.3024 17.5894 20.4593 17.7036 20.6448 17.7607C20.7447 17.7892 20.8588 17.8035 20.9587 17.8035C21.0586 17.8035 21.1727 17.7892 21.2726 17.7607C21.4581 17.7036 21.6007 17.5894 21.6007 17.4182L21.4723 2.7226C21.4723 2.52285 21.3297 2.39446 21.1442 2.33739C21.0443 2.30885 20.9444 2.29459 20.8446 2.29459C20.7304 2.29459 20.6305 2.30885 20.5307 2.33739C20.3452 2.39446 20.1882 2.49431 20.1882 2.60845Z" fill="white"/></svg>`},
		'54': {name: 'Маршрут', icon: `<svg xmlns="http://www.w3.org/2000/svg" width="31" height="28" viewBox="0 0 31 28" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M17.1644 4.57764e-05H14.1539L14.1682 0.0143134C14.054 0.0143134 13.9542 0.028581 13.84 0.0571162C13.7259 0.0856514 13.626 0.128454 13.5404 0.185525C13.5261 0.192658 13.5119 0.20336 13.4976 0.214061C13.4833 0.224761 13.4691 0.235461 13.4548 0.242595C13.3121 0.342468 13.2122 0.470876 13.1266 0.613552C13.0553 0.756228 13.0125 0.92744 13.0125 1.09865V2.93917H10.1447C9.91643 2.93917 9.68814 3.03904 9.5312 3.19599C9.37426 3.35293 9.27438 3.56694 9.27438 3.80949C9.27438 4.05204 9.37426 4.26606 9.5312 4.423C9.68814 4.57994 9.90216 4.67982 10.1447 4.67982H25.7249L28.4358 6.87703L25.7249 9.07424H6.23539V4.67982H7.00584C7.24839 4.67982 7.4624 4.57994 7.61934 4.423C7.77629 4.26606 7.87616 4.05204 7.87616 3.80949C7.87616 3.58121 7.77629 3.35293 7.61934 3.19599C7.4624 3.03904 7.24839 2.93917 7.00584 2.93917H5.3508C5.12251 2.93917 4.89423 3.03904 4.73729 3.19599C4.58035 3.35293 4.48047 3.56694 4.48047 3.80949V9.95883C4.48047 10.2014 4.58035 10.4154 4.73729 10.5723C4.89423 10.7293 5.10825 10.8292 5.3508 10.8292H13.0125V12.3701H5.3508C5.23666 12.3701 5.12251 12.3843 5.02264 12.4271C4.92277 12.4699 4.82289 12.527 4.75156 12.5983L0.999179 15.6373C0.8137 15.78 0.713827 15.994 0.685292 16.2223C0.656757 16.4506 0.713827 16.6789 0.87077 16.8643L0.942108 16.9357C0.956376 16.9428 0.967077 16.9535 0.977777 16.9642C0.988478 16.9749 0.999179 16.9856 1.01345 16.9928L4.79436 20.0603C4.85143 20.1031 4.9085 20.1459 4.96557 20.1744V20.26H12.9982V26.4236C12.9982 26.5948 13.041 26.7661 13.1124 26.9087C13.1837 27.0514 13.2978 27.1798 13.4405 27.2797L13.7401 27.4937L13.7829 27.4509H13.7972C13.9114 27.4937 14.0398 27.508 14.1682 27.508H17.1786C17.307 27.508 17.4354 27.4937 17.5496 27.4509C17.678 27.4081 17.7921 27.351 17.892 27.2797L18.049 27.1656V27.137C18.1203 27.0657 18.1774 26.9801 18.2202 26.8945C18.3058 26.7518 18.3486 26.5806 18.3486 26.4094V22.3003C18.3486 22.072 18.2487 21.8437 18.0918 21.6868C17.9348 21.5298 17.7208 21.43 17.4783 21.43C17.25 21.43 17.0217 21.5298 16.8647 21.6868C16.7078 21.8437 16.6079 22.0577 16.6079 22.3003V25.7388H14.7674V20.2458H15.6805C15.9231 20.2458 16.1371 20.1459 16.294 19.9889C16.451 19.832 16.5509 19.618 16.5509 19.3754C16.5509 19.1472 16.451 18.9189 16.294 18.7619C16.1371 18.605 15.9231 18.5051 15.6805 18.5051H5.65042L2.93957 16.3079L5.65042 14.1107H25.14V18.5051H22.4576C22.2294 18.5051 22.0011 18.605 21.8441 18.7619C21.6872 18.9189 21.5873 19.1329 21.5873 19.3754C21.5873 19.618 21.6872 19.832 21.8441 19.9889C22.0011 20.1459 22.2151 20.2458 22.4576 20.2458H26.0103C26.2528 20.2458 26.4668 20.1459 26.6238 19.9889C26.7807 19.832 26.8806 19.618 26.8806 19.3754V13.2261C26.8806 12.9978 26.7807 12.7695 26.6238 12.6126C26.4668 12.4557 26.2528 12.3558 26.0103 12.3558H18.3486V10.8149H26.3812V10.7293C26.4383 10.7007 26.4954 10.6579 26.5524 10.6151L30.3334 7.5476C30.3619 7.53334 30.3762 7.51907 30.4047 7.49053C30.4148 7.48043 30.4249 7.47211 30.4344 7.46431C30.4517 7.4501 30.4668 7.43762 30.476 7.4192C30.6187 7.23372 30.69 7.00544 30.6615 6.77715C30.6472 6.56314 30.5331 6.34913 30.3476 6.19218L26.5952 3.15318C26.5096 3.08185 26.424 3.02478 26.3242 2.98197C26.3126 2.97909 26.3012 2.97621 26.29 2.97336C26.1897 2.94796 26.0986 2.9249 25.996 2.9249H18.3343V1.08438C18.3343 0.913172 18.2915 0.741961 18.2202 0.599285C18.1488 0.456609 18.0347 0.3282 17.892 0.228327L17.5924 0.0143134L17.5496 0.0571162H17.5353C17.4212 0.0143134 17.2928 4.57764e-05 17.1644 4.57764e-05ZM16.5794 10.8434V12.3843H14.7389V10.8434H16.5794ZM18.2487 20.0175C18.4056 20.1744 18.6197 20.2743 18.8622 20.2743H19.3616C19.6041 20.2743 19.8181 20.1744 19.9751 20.0175C20.132 19.8605 20.2319 19.6465 20.2319 19.404C20.2319 19.1757 20.132 18.9474 19.9751 18.7905C19.8181 18.6335 19.6041 18.5337 19.3616 18.5337H18.8622C18.6339 18.5337 18.4056 18.6335 18.2487 18.7905C18.0918 18.9474 17.9919 19.1614 17.9919 19.404C17.9919 19.6465 18.0918 19.8605 18.2487 20.0175ZM16.5794 1.75496V2.9249H14.7389V1.75496H16.5794Z" fill="#ccc"/></svg>`},
	}
	
	const debounce = (f, t) => {
		return function (args) {
			let previousCall = this.lastCall;
			this.lastCall = Date.now();
			if (previousCall && ((this.lastCall - previousCall) <= t)) {
				clearTimeout(this.lastCallTimer);
			}
			this.lastCallTimer = setTimeout(() => f(args), t);
		}
	}
	
	function throttle(fn, wait) {
	  let time = Date.now();
	  return function() {
		if ((time + wait - Date.now()) < 0) {
		  fn();
		  time = Date.now();
		}
	  }
	}
	
	const myRouteStartPointsList = [ 
		{coords: [55.826296, 37.637650], name: 'Арка Главного входа', address: 'Москва, ВДНХ, Арка Главного входа'},
		{coords: [], name: 'КПП «1-й Лихоборский»', address: 'Москва, ВДНХ, КПП «1-й Лихоборский»'},
		{coords: [], name: 'КПП «1-й Северный»', address: 'Москва, ВДНХ, КПП «1-й Северный»'},
		{coords: [], name: 'КПП «2-й Северный»', address: 'Москва, ВДНХ, КПП «2-й Северный»'},
		{coords: [], name: 'КПП «Совхозный»', address: 'Москва, ВДНХ, КПП «Совхозный»'},
		{coords: [], name: 'КПП «Хованский»', address: 'Москва, ВДНХ, КПП «Хованский»'},
		{coords: [], name: 'Арка Северного входа', address: 'Москва, ВДНХ, Арка Северного входа'},
		{coords: [], name: 'Арка Южного входа', address: 'Москва, ВДНХ, Арка Южного входа'},
		{coords: [], name: 'Вход в парк «Останкино» со стороны Ботанической улицы', address: 'Москва, ВДНХ, Вход в парк «Останкино» со стороны Ботанической улицы'},
		{coords: [], name: 'Вход в парк «Останкино» со стороны Дворцового (Останкинского) пруда', address: 'Москва, ВДНХ, Вход в парк «Останкино» со стороны Дворцового (Останкинского) пруда'},
		{coords: [], name: 'Вход в парк «Останкино» со стороны остановки «Улица Академика Комарова»', address: 'Москва, ВДНХ, Вход в парк «Останкино» со стороны остановки «Улица Академика Комарова»'},
		{coords: [], name: 'Вход в парк «Останкино» со стороны телецентра', address: 'Москва, ВДНХ, Вход в парк «Останкино» со стороны телецентра'},
		{coords: [], name: 'Главный вход в парк «Останкино» со стороны музея-усадьбы', address: 'Москва, ВДНХ, Главный вход в парк «Останкино» со стороны музея-усадьбы'}
	]
	
	Vue.directive('click-outside', {
	  bind: function (el, binding, vnode) {
		el.clickOutsideEvent = function (event) {
		  // here I check that click was outside the el and his children
		  if (!(el == event.target || el.contains(event.target))) {
			// and if it did, call method provided in attribute value
			vnode.context[binding.expression](event);
		  }
		};
		document.body.addEventListener('click', el.clickOutsideEvent)
	  },
	  unbind: function (el) {
		document.body.removeEventListener('click', el.clickOutsideEvent)
	  },
	})
	
	const chartOptions = {
		responsive: true,
		maintainAspectRatio: false,
		title: {
			//display: true,
			//text: 'Chart.js Line Chart'
		},
		legend: {
            display: false
        },
		tooltips: {
			mode: 'index',
			intersect: false,
			callbacks: {
				title: function(tooltipItem, data) {
				  	return ''
				},
				label: function(tooltipItem, data) {
					let val = tooltipItem.yLabel
					let res = 'свободно'
					if(val > 30 && val < 70) {
						res = 'средняя загруженность'
					}
					if(val >= 70) {
						res = 'тесно'
					}
					return res
				}
			}
		},
		hover: {
			mode: 'nearest',
			intersect: true
		},
		scales: {
			xAxes: [{
			  display: true,
			  categoryPercentage: 0.9,
			  scaleLabel: {
				display: true,
				labelString: 'Часы посещения'
			  }
			}],
			yAxes: [
				{
					display: false,
					scaleLabel: {
						display: true,
						labelString: 'Value'
					},
					ticks: {
						beginAtZero: true
					}
				}
			]
		}
	}
	
	Vue.component('my-bar-chart', {
        extends: VueChartJs.Bar,
        props: ['barData', 'chartOptions'],
        mounted() {
          this.renderChart(this.barData, this.chartOptions);
        },
        watch: {
          barData () {
            console.log('bar data changed')
            this.renderChart(this.barData, this.chartOptions);
        },
          chartOptions () {
            this.renderChart(this.barData, this.chartOptions);
         }
        }
	}, {
        responsive: true,
        maintainAspectRatio: false
 	})
	
	const barsSampleData = [
		{
			name: 'ПН',
			chartData: {
				labels: [
				  '8',
				  '9',
				  '10',
				  '11',
				  '12',
				  '13',
				  '14',
				  '15',
				  '16',
				  '17',
				  '18',
				  '19',
				  '20',
				  '21',
				  '22'
				],
				datasets: [
					{
						backgroundColor: '#336af7',
						data: [5, 10, 20, 30, 50, 15, 30, 40, 60, 80, 70, 60, 30, 25, 10]
					}
				]
			}
		},
		{
			name: 'ВТ',
			chartData: {
				labels: [
				  '8',
				  '9',
				  '10',
				  '11',
				  '12',
				  '13',
				  '14',
				  '15',
				  '16',
				  '17',
				  '18',
				  '19',
				  '20',
				  '21',
				  '22'
				],
				datasets: [
					{
						backgroundColor: '#336af7',
						data: [5, 10, 20, 30, 50, 15, 30, 40, 60, 80, 70, 60, 30, 25, 10]
					}
				]
			}
		},
		{
			name: 'СР',
			chartData: {
				labels: [
				  '8',
				  '9',
				  '10',
				  '11',
				  '12',
				  '13',
				  '14',
				  '15',
				  '16',
				  '17',
				  '18',
				  '19',
				  '20',
				  '21',
				  '22'
				],
				datasets: [
					{
						backgroundColor: '#336af7',
						data: [5, 10, 20, 30, 50, 15, 30, 40, 60, 80, 70, 60, 30, 25, 10]
					}
				]
			}
		},
		{
			name: 'ЧТ',
			chartData: {
				labels: [
				  '8',
				  '9',
				  '10',
				  '11',
				  '12',
				  '13',
				  '14',
				  '15',
				  '16',
				  '17',
				  '18',
				  '19',
				  '20',
				  '21',
				  '22'
				],
				datasets: [
					{
						backgroundColor: '#336af7',
						data: [5, 10, 20, 30, 50, 15, 30, 40, 60, 80, 70, 60, 30, 25, 10]
					}
				]
			}
		},
		{
			name: 'ПТ',
			chartData: {
				labels: [
				  '8',
				  '9',
				  '10',
				  '11',
				  '12',
				  '13',
				  '14',
				  '15',
				  '16',
				  '17',
				  '18',
				  '19',
				  '20',
				  '21',
				  '22'
				],
				datasets: [
					{
						backgroundColor: '#336af7',
						data: [5, 10, 20, 30, 50, 15, 30, 40, 60, 80, 70, 60, 30, 25, 10]
					}
				]
			}
		},
		{
			name: 'СБ',
			chartData: {
				labels: [
				  '8',
				  '9',
				  '10',
				  '11',
				  '12',
				  '13',
				  '14',
				  '15',
				  '16',
				  '17',
				  '18',
				  '19',
				  '20',
				  '21',
				  '22'
				],
				datasets: [
					{
						backgroundColor: '#336af7',
						data: [5, 10, 20, 30, 50, 15, 30, 40, 60, 80, 70, 60, 30, 25, 10]
					}
				]
			}
		},
		{
			name: 'ВС',
			chartData: {
				labels: [
				  '8',
				  '9',
				  '10',
				  '11',
				  '12',
				  '13',
				  '14',
				  '15',
				  '16',
				  '17',
				  '18',
				  '19',
				  '20',
				  '21',
				  '22'
				],
				datasets: [
					{
						backgroundColor: '#336af7',
						data: [5, 10, 20, 30, 50, 15, 30, 40, 60, 80, 70, 60, 30, 25, 10]
					}
				]
			}
		}
	]
	
	const generateRouteQuizQuestions = [
		/*{
			order: 0,
			id: 'stime',
			title: 'Сколько времени',
			type: 'or',
			variants: [
				{
					title: '2 часа',
					value: 2
				},
				{
					title: '3 часа',
					value: 3
				},
				{
					title: '4 часа',
					value: 4
				}
			]
		},
		{
			order: 1,
			id: 'paid',
			title: 'Платные объекты',
			type: 'or',
			variants: [
				{
					title: 'Да',
					value: 1
				},
				{
					title: 'Нет',
					value: 0
				},
				{
					title: 'Не важно',
					value: null
				}
			]
		},*/
		{
			order: 2,
			id: 'count',
			title: 'С кем?',
			type: 'or',
			variants: [
				{
					title: 'Один',
					value: 1
				},
				{
					title: 'Вдвоем',
					value: 2
				},
				{
					title: 'С детьми',
					value: 3
				}
			]
		},
		{
			order: 5,
			id: 'food',
			title: 'Покушать в перерыве',
			type: 'or',
			variants: [
				{
					title: 'Да',
					value: 1
				},
				{
					title: 'Нет',
					value: 0
				}
			]
		},
		{
			order: 6,
			id: 'inoutdoor',
			title: 'Зона проведения',
			type: 'or',
			variants: [
				{
					title: 'В помещении',
					value: 1
				},
				{
					title: 'На улице',
					value: 2
				},
				{
					title: 'Не важно',
					value: null
				}
			]
		},
		{
			order: 3,
			id: 'tags',
			title: 'Что интересно?',
			type: 'and',
			variants: [
				{
					title: 'Лекция',
					value: 'Лекция'
				},
				{
					title: 'Образование',
					value: 'Образование'
				},
				{
					title: 'Концерты и шоу',
					value: 'Концерты и шоу'
				},
				{
					title: 'Выставка',
					value: 'Выставка'
				},
				{
					title: 'Экскурсия',
					value: 'Экскурсия'
				},
				{
					title: 'Природа',
					value: 'Природа'
				},
				{
					title: 'Прогулка',
					value: 'Прогулка'
				},
				{
					title: 'Рыбки',
					value: 'Рыбки'
				},
				{
					title: 'Космос',
					value: 'Космос'
				}
			]
		}
	]
	
	let autocompleteItems = window.TAGS_CLOUD.map(e => ({text: e}))
	
	Vue.component('vselect-move', {
		props: {
			items: {
				default: () => ([])
			},
			day_id: {}
		},
		data: function () {
			return {
				isListOpen: false,
				//myRouteItems: this.items
			}
		},
		template: `
		<div class="vselect vselect--move">
			<div v-if="items.length" class="vselect-trigger vselect-trigger--move" @click.stop="isListOpen = true">
				<div class="vselect-trigger__icon">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
						<path d="M11.0123 12.0038V3.40579L9.71929 4.70679C9.62704 4.8023 9.5167 4.87848 9.39469 4.93089C9.27269 4.9833 9.14147 5.01088 9.00869 5.01204C8.87591 5.01319 8.74423 4.98789 8.62133 4.93761C8.49844 4.88733 8.38679 4.81307 8.29289 4.71918C8.199 4.62529 8.12475 4.51364 8.07447 4.39074C8.02419 4.26784 7.99888 4.13616 8.00004 4.00339C8.00119 3.87061 8.02878 3.73939 8.08119 3.61738C8.1336 3.49538 8.20978 3.38503 8.30529 3.29279L11.3053 0.292787C11.4928 0.105316 11.7471 0 12.0123 0C12.2775 0 12.5318 0.105316 12.7193 0.292787L15.7193 3.29279C15.9014 3.48139 16.0022 3.73399 16 3.99619C15.9977 4.25838 15.8925 4.5092 15.7071 4.6946C15.5217 4.88001 15.2709 4.98518 15.0087 4.98746C14.7465 4.98974 14.4939 4.88894 14.3053 4.70679L13.0123 3.40679V12.0038C13.0123 12.269 12.9069 12.5234 12.7194 12.7109C12.5319 12.8984 12.2775 13.0038 12.0123 13.0038C11.7471 13.0038 11.4927 12.8984 11.3052 12.7109C11.1176 12.5234 11.0123 12.269 11.0123 12.0038ZM3.01229 3.99579C3.01229 3.73057 3.11765 3.47622 3.30518 3.28868C3.49272 3.10114 3.74707 2.99579 4.01229 2.99579C4.2775 2.99579 4.53186 3.10114 4.71939 3.28868C4.90693 3.47622 5.01229 3.73057 5.01229 3.99579V12.5938L6.30529 11.2928C6.49389 11.1106 6.74649 11.0098 7.00869 11.0121C7.27089 11.0144 7.5217 11.1196 7.70711 11.305C7.89251 11.4904 7.99768 11.7412 7.99996 12.0034C8.00224 12.2656 7.90145 12.5182 7.71929 12.7068L4.71929 15.7068C4.53176 15.8943 4.27745 15.9996 4.01229 15.9996C3.74712 15.9996 3.49282 15.8943 3.30529 15.7068L0.305288 12.7068C0.209778 12.6145 0.133596 12.5042 0.0811869 12.3822C0.0287779 12.2602 0.00119157 12.129 3.77571e-05 11.9962C-0.00111606 11.8634 0.0241854 11.7317 0.0744663 11.6088C0.124747 11.4859 0.199 11.3743 0.292893 11.2804C0.386786 11.1865 0.498438 11.1122 0.621334 11.062C0.744231 11.0117 0.87591 10.9864 1.00869 10.9875C1.14147 10.9887 1.27269 11.0163 1.39469 11.0687C1.5167 11.1211 1.62704 11.1973 1.71929 11.2928L3.01229 12.5928V3.99679V3.99579Z" fill="black"/>
					</svg>
				</div>
			</div>
			<div v-else class="vselect-trigger vselect-trigger--move" @click.stop="addItemToMyRouteFromPlan">
				<div class="vselect-trigger__icon">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
						<path d="M11.0123 12.0038V3.40579L9.71929 4.70679C9.62704 4.8023 9.5167 4.87848 9.39469 4.93089C9.27269 4.9833 9.14147 5.01088 9.00869 5.01204C8.87591 5.01319 8.74423 4.98789 8.62133 4.93761C8.49844 4.88733 8.38679 4.81307 8.29289 4.71918C8.199 4.62529 8.12475 4.51364 8.07447 4.39074C8.02419 4.26784 7.99888 4.13616 8.00004 4.00339C8.00119 3.87061 8.02878 3.73939 8.08119 3.61738C8.1336 3.49538 8.20978 3.38503 8.30529 3.29279L11.3053 0.292787C11.4928 0.105316 11.7471 0 12.0123 0C12.2775 0 12.5318 0.105316 12.7193 0.292787L15.7193 3.29279C15.9014 3.48139 16.0022 3.73399 16 3.99619C15.9977 4.25838 15.8925 4.5092 15.7071 4.6946C15.5217 4.88001 15.2709 4.98518 15.0087 4.98746C14.7465 4.98974 14.4939 4.88894 14.3053 4.70679L13.0123 3.40679V12.0038C13.0123 12.269 12.9069 12.5234 12.7194 12.7109C12.5319 12.8984 12.2775 13.0038 12.0123 13.0038C11.7471 13.0038 11.4927 12.8984 11.3052 12.7109C11.1176 12.5234 11.0123 12.269 11.0123 12.0038ZM3.01229 3.99579C3.01229 3.73057 3.11765 3.47622 3.30518 3.28868C3.49272 3.10114 3.74707 2.99579 4.01229 2.99579C4.2775 2.99579 4.53186 3.10114 4.71939 3.28868C4.90693 3.47622 5.01229 3.73057 5.01229 3.99579V12.5938L6.30529 11.2928C6.49389 11.1106 6.74649 11.0098 7.00869 11.0121C7.27089 11.0144 7.5217 11.1196 7.70711 11.305C7.89251 11.4904 7.99768 11.7412 7.99996 12.0034C8.00224 12.2656 7.90145 12.5182 7.71929 12.7068L4.71929 15.7068C4.53176 15.8943 4.27745 15.9996 4.01229 15.9996C3.74712 15.9996 3.49282 15.8943 3.30529 15.7068L0.305288 12.7068C0.209778 12.6145 0.133596 12.5042 0.0811869 12.3822C0.0287779 12.2602 0.00119157 12.129 3.77571e-05 11.9962C-0.00111606 11.8634 0.0241854 11.7317 0.0744663 11.6088C0.124747 11.4859 0.199 11.3743 0.292893 11.2804C0.386786 11.1865 0.498438 11.1122 0.621334 11.062C0.744231 11.0117 0.87591 10.9864 1.00869 10.9875C1.14147 10.9887 1.27269 11.0163 1.39469 11.0687C1.5167 11.1211 1.62704 11.1973 1.71929 11.2928L3.01229 12.5928V3.99679V3.99579Z" fill="black"/>
					</svg>
				</div>
			</div>
			<div class="vselect-list" :class="{'vselect-list--active': isListOpen}" v-click-outside="closeList">
				<div class="vselect-list__item" v-for="day in datesList" :key="day.date_id" @click.stop="addItemToMyRouteFromPlan(day.date_id)">
					{{ getDayDate(day.date) }}
				</div>
			</div>
		</div>
		`,
		methods: {
			closeList() {
				this.isListOpen = false
			},
			addItemToMyRouteFromPlan(dayId = false) {
				console.log('vselect addItemToMyRouteFromPlan')
				this.$emit('move-item', dayId)
				this.isListOpen = false
			},
			getDayDate(date) {
				return new Date(date).toLocaleString('default', { month: 'long', day: 'numeric' })
			}
		},
		computed: {
			datesList() {
				if(this.day_id) return this.items.filter(e => e.date_id != this.day_id)
				return this.items
			}
		}
	})
	
	Vue.component('day-add-object', {
		data: function () {
			return {
			  	query: ''
			}
		},
		template: `
		<div class="search-day-add">
			<div class="search-day-add__input">
				<input v-model="query" type="text" class="search-day-add-input" placeholder="Добавить место">
				<button class="search-day-add__input-reset" @click.stop="query = ''" v-show="query">
					<svg xmlns="http://www.w3.org/2000/svg" width="23" height="24" viewBox="0 0 23 24" fill="none"><path d="M5.57159 17.3144C5.43017 17.173 5.35239 17.0104 5.33825 16.8265C5.35239 16.6427 5.43017 16.48 5.57159 16.3386L9.98394 11.9263L5.63523 7.57756C5.49381 7.43614 5.41603 7.27351 5.40189 7.08966C5.41603 6.90581 5.49381 6.74318 5.63523 6.60175L6.31406 5.92293C6.45548 5.78151 6.61104 5.7108 6.78075 5.7108C6.97874 5.7108 7.14844 5.78151 7.28986 5.92293L11.6386 10.2716L15.9236 5.98657C16.0651 5.84515 16.2206 5.77444 16.3903 5.77444C16.5883 5.77444 16.758 5.84515 16.8994 5.98657L17.6419 6.72903C17.7833 6.87046 17.847 7.03309 17.8328 7.21694C17.847 7.40079 17.7833 7.56342 17.6419 7.70484L13.3568 11.9899L17.7268 16.3598C17.8682 16.5013 17.9318 16.6639 17.9177 16.8477C17.9318 17.0316 17.8682 17.1942 17.7268 17.3356L17.0479 18.0145C16.9065 18.1559 16.7368 18.2266 16.5388 18.2266C16.3691 18.2266 16.2136 18.1559 16.0721 18.0145L11.7022 13.6445L7.28986 18.0569C7.14844 18.1983 6.97874 18.269 6.78075 18.269C6.61104 18.269 6.45548 18.1983 6.31406 18.0569L5.57159 17.3144Z" fill="#2D2727"></path></svg>
				</button>
			</div>
			<div class="search-day-add-list" :class="{'search-day-add-list--active': list.length}">
				<div class="search-day-add-list__item" v-for="sdai in list">
					{{ sdai.item_data.field_header }}
					<button @click.stop="$emit('add-day-object', sdai.item_data)" class="search-day-add-list__item-btn rbtn">+</button>
				</div>
			</div>
		</div>
		`,
		computed: {
			list() {
				let list = window.SEARCH_ITEMS
				if(this.query) {
					list = list.filter(e => e.item_data.field_header.toLowerCase().includes(this.query.toLowerCase()))
					list.length = list.length > 20 ? 20 : list.length
					return list
				}
				return []
			}
		}
	})
	
	Vue.component('dropdown-select', {
		props: {
			cat: {}
		},
		data: function () {
			return {
				isListOpened: false,
			  	query: '',
				categories: [
					{title: 'билеты', value: 'tickets', isPickable: false},
					{title: 'продукты', value: 'food', isPickable: true},
					{title: 'рестораны', value: 'restaurants', isPickable: true}
				]
			}
		},
		computed: {
			getCategory() {
				const category = this.categories.find(e => e.value == this.cat)
				return category ? category.title : 'Выберите категорию'
			},
			pickableCategories() {
				return this.categories.filter(e => e.isPickable)
			}
		},
		methods: {
			closeList() {
				this.isListOpened = false
			},
			setBudgetItemCat(value) {
				this.$emit('set-budget-item-cat', value)
				this.closeList()
			}
		},
		template: `
			<div class="ddown">
				<div class="ddown-trigger" @click.stop="isListOpened = !isListOpened">
					{{ getCategory }}
				</div>
				<div class="ddown-list" :class="{'ddown-list--active': isListOpened}" v-click-outside="closeList">
					<div @click.stop="setBudgetItemCat(dd.value)" class="ddown-list__item" v-for="dd in pickableCategories">
						{{ dd.title }}
					</div>
				</div>
			</div>
		`
	})
	
	Vue.component('route-budget-day', {
		props: {
			item: {}
		},
		data: function () {
			return {
			  	query: '',
				categories: [
					{title: 'билеты', value: 'tickets', isPickable: false},
					{title: 'продукты', value: 'food', isPickable: true},
					{title: 'рестораны', value: 'restaurants', isPickable: true}
				]
			}
		},
		template: `
		<div class="route-budget-day">
			<div class="route-budget-day__date">{{ getDateText }}</div>
			<div class="route-budget__list" v-if="filteredBudgetItems(item.budget)">
				<div class="route-budget__listitem" :class="{'route-budget__listitem--blocked': budgetItem.isBlocked}" v-for="(budgetItem, budgetItemIndex) in filteredBudgetItems(item.budget)">
					<div class="route-budget__listitem-main">
						<div class="route-budget__listitem__block route-budget__listitem__block--left">
							<div class="route-budget__listitem__main">
								<div class="route-budget__listitem__icon">
									<svg xmlns="http://www.w3.org/2000/svg" width="37" height="37" viewBox="0 0 37 37" fill="none">
										<path d="M19.6562 31.2188H12.7188C10.8788 31.2188 9.11423 30.4878 7.8132 29.1868C6.51216 27.8858 5.78125 26.1212 5.78125 24.2812V12.7188C5.78125 10.8788 6.51216 9.11423 7.8132 7.8132C9.11423 6.51216 10.8788 5.78125 12.7188 5.78125H24.2812C26.1212 5.78125 27.8858 6.51216 29.1868 7.8132C30.4878 9.11423 31.2188 10.8788 31.2188 12.7188V19.6562C30.0625 23.125 23.125 30.0625 19.6562 31.2188Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
										<path d="M19.6562 31.2188V26.5938C19.6562 24.7538 20.3872 22.9892 21.6882 21.6882C22.9892 20.3872 24.7538 19.6563 26.5938 19.6562H31.2188" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
										<path d="M10.4509 20.1152C10.3763 20.1152 10.3063 20.0872 10.2409 20.0312C10.1849 19.9752 10.1569 19.9052 10.1569 19.8212C10.1569 19.7839 10.1663 19.7419 10.1849 19.6952L13.5589 10.6652C13.5869 10.5719 13.6383 10.4926 13.7129 10.4272C13.7969 10.3526 13.9089 10.3152 14.0489 10.3152H15.5749C15.7149 10.3152 15.8223 10.3526 15.8969 10.4272C15.9716 10.4926 16.0276 10.5719 16.0649 10.6652L19.4389 19.6952C19.4483 19.7419 19.4529 19.7839 19.4529 19.8212C19.4529 19.9052 19.4249 19.9752 19.3689 20.0312C19.3129 20.0872 19.2476 20.1152 19.1729 20.1152H17.9549C17.8243 20.1152 17.7263 20.0872 17.6609 20.0312C17.6049 19.9659 17.5676 19.9052 17.5489 19.8492L16.8909 18.1412H12.7329L12.0749 19.8492C12.0563 19.9052 12.0143 19.9659 11.9489 20.0312C11.8929 20.0872 11.7996 20.1152 11.6689 20.1152H10.4509ZM13.2229 16.5312H16.4009L14.8049 12.2052L13.2229 16.5312Z" fill="black"/>
									</svg>
								</div>
								<div class="route-budget__listitem__texts">
									<div class="route-budget__listitem__type" v-if="budgetItem.isBlocked">
										{{ getCategory(budgetItem.category) }}
									</div>
									<div class="route-budget__listitem__type" v-else>
										<dropdown-select @set-budget-item-cat="(cat) => setBudgetItemCat(cat, budgetItem)" :cat="budgetItem.category"></dropdown-select>
									</div>
									<div class="route-budget__listitem__text">
										<template v-if="budgetItem.isBlocked">
											{{ budgetItem.text }}
										</template>
										<template v-else>	
											<input v-model="budgetItem.text" type="text">
										</template>
									</div>
								</div>
							</div>
						</div>
						<div class="route-budget__listitem__block route-budget__listitem__block--right">
							<div class="route-budget__listitem__price">
								<template v-if="budgetItem.isBlocked">
									{{ getPrice(budgetItem) }} ₽
								</template>
								<template v-else>
									<div class="route-budget__listitem__price-edit">
										<input v-model="budgetItem.price" type="text"> ₽
									</div>
								</template>
							</div>
						</div>
					</div>
					<div class="route-budget__listitem-actions">
						<button v-if="!budgetItem.isBlocked" @click.stop="deleteBudgetItem(budgetItemIndex)" class="rbtn rbtn--flat">
							<svg xmlns="http://www.w3.org/2000/svg" width="23" height="24" viewBox="0 0 23 24" fill="none"><path d="M5.57159 17.3144C5.43017 17.173 5.35239 17.0104 5.33825 16.8265C5.35239 16.6427 5.43017 16.48 5.57159 16.3386L9.98394 11.9263L5.63523 7.57756C5.49381 7.43614 5.41603 7.27351 5.40189 7.08966C5.41603 6.90581 5.49381 6.74318 5.63523 6.60175L6.31406 5.92293C6.45548 5.78151 6.61104 5.7108 6.78075 5.7108C6.97874 5.7108 7.14844 5.78151 7.28986 5.92293L11.6386 10.2716L15.9236 5.98657C16.0651 5.84515 16.2206 5.77444 16.3903 5.77444C16.5883 5.77444 16.758 5.84515 16.8994 5.98657L17.6419 6.72903C17.7833 6.87046 17.847 7.03309 17.8328 7.21694C17.847 7.40079 17.7833 7.56342 17.6419 7.70484L13.3568 11.9899L17.7268 16.3598C17.8682 16.5013 17.9318 16.6639 17.9177 16.8477C17.9318 17.0316 17.8682 17.1942 17.7268 17.3356L17.0479 18.0145C16.9065 18.1559 16.7368 18.2266 16.5388 18.2266C16.3691 18.2266 16.2136 18.1559 16.0721 18.0145L11.7022 13.6445L7.28986 18.0569C7.14844 18.1983 6.97874 18.269 6.78075 18.269C6.61104 18.269 6.45548 18.1983 6.31406 18.0569L5.57159 17.3144Z" fill="#E85768"></path></svg>
						</button>
					</div>
				</div>
			</div>
			<div class="route-budget__additem">
				<button class="rbtn rbtn--text rbtn--size-s" @click.stop="createNewBudgetItem">
					<svg xmlns="http://www.w3.org/2000/svg" width="17" height="18" viewBox="0 0 17 18" fill="none">
						<path d="M7.79 17.01C7.59 17.01 7.42 16.95 7.28 16.83C7.16 16.69 7.1 16.52 7.1 16.32V10.08H0.95C0.75 10.08 0.58 10.02 0.44 9.9C0.32 9.76 0.26 9.59 0.26 9.39V8.43C0.26 8.23 0.32 8.07 0.44 7.95C0.58 7.81 0.75 7.74 0.95 7.74H7.1V1.68C7.1 1.48 7.16 1.32 7.28 1.2C7.42 1.06 7.59 0.989999 7.79 0.989999H8.84C9.04 0.989999 9.2 1.06 9.32 1.2C9.46 1.32 9.53 1.48 9.53 1.68V7.74H15.71C15.91 7.74 16.07 7.81 16.19 7.95C16.33 8.07 16.4 8.23 16.4 8.43V9.39C16.4 9.59 16.33 9.76 16.19 9.9C16.07 10.02 15.91 10.08 15.71 10.08H9.53V16.32C9.53 16.52 9.46 16.69 9.32 16.83C9.2 16.95 9.04 17.01 8.84 17.01H7.79Z" fill="black"/>
					</svg>
					Расход
				</button>
			</div>
		</div>
		`,
		computed: {
			getDateText() {
				return new Date(this.item.date).toLocaleString('default', { month: 'long', day: 'numeric' })
			},
			getTicketsFullPrice() {
				const dayTicketsFullPrice = this.item.items.reduce((a, b) => {
					a += b.field_prices ? Number(b.field_prices) : 0
					return a
				}, 0)
				return dayTicketsFullPrice
			}
		},
		methods: {
			filteredBudgetItems(items) {
				return items.filter(e => {
					if(e.category == 'tickets' && this.getTicketsFullPrice == 0) return false
					return true
				})
			},
			getPriceValue(budgetItem) {
				if(budgetItem.category == 'tickets') return 'от ' + this.getTicketsFullPrice
				return budgetItem.price
			},
			getPrice(budgetItem) {
				if(budgetItem.category == 'tickets') return 'от ' + this.getTicketsFullPrice
				return budgetItem.price
			},
			setBudgetItemCat(cat, budgetItem) {
				//console.log({cat, budgetItem})
				budgetItem.category = cat
			},
			onBudgetItemInput: debounce(function(event, budgetItem) {
				console.log(arguments)
			}, 1000),
			deleteBudgetItem(budgetItemIndex) {
				this.item.budget.splice(budgetItemIndex, 1)
			},
			getCategory(cat) {
				const category = this.categories.find(e => e.value == cat)
				return category ? category.title : 'Выберите категорию'
			},
			createNewBudgetItem() {
				const newBudgetItem = {
					category: '',
					price: 0,
					text: 'Заголовок',
					isBlocked: false
				}
				
				this.item.budget.push(newBudgetItem)
				//this.$emit('create-new')
			}
		}
	})
	
	window.VUE_VDNH = new Vue({
		el: '#v-search-root',
		name: 'VDNH',
		data: function() {
			return {
				drag: false,
				tag: '',
				tags: [],
				autocompleteItems,
				isAppLoaded: true,
				isFullWidthLayout: false,
				isSearchShowlist: true,
				myRouteDates: qstore.state.myRoute.dates,
				pageItems: [],
				myRouteTitle: qstore.state.myRoute.title,
				myRoutePlanItems: qstore.state.myRoute.planItems,//[],
				myRouteItems: [],
				myRouteSelectedDay: null,
				myRouteRecommendations: [],
				activeRoute: {
					paths: [],
					common: {
						duration: '',
						distance: ''
					}
				},
				myRouteStartPointsList: myRouteStartPointsList,
				isMyRouteStartPointsListActive: false,
				myRouteStartPoint: qstore.state.myRoute.startPoint,
				myRouteCurrentDay: 0,
				isPageItemsLoaded: false,
				isHeatmapShowed: false,
				workLoadItems: barsSampleData,
				selectedWorkLoadItem: {name: 'ПН'},
				chartOptions,
				chartData: {
					labels: [
						'8',
						'9',
						'10',
						'11',
						'12',
						'13',
						'14',
						'15',
						'16',
						'17',
						'18',
						'19',
						'20',
						'21',
						'22'
					],
					datasets: [
					  	{
							//label: 'Data One',
						 	backgroundColor: '#336af7',
							data: [5, 10, 20, 30, 50, 15, 30, 40, 60, 80, 70, 60, 30, 25, 10]
					  	}
					]
				},
				mapRouteMode: 'pedestrian',
				isGenerateRouteQuizShowed: false,
				generateRouteQuizQuestions: generateRouteQuizQuestions,
				generateRouteQuizSelectedOptions: {
					stime: {type: 'or', items: []},
					paid: {type: 'or', items: []},
					count: {type: 'or', items: []},
					tags: {type: 'and', items: []},
					food: {type: 'or', items: []},
					inoutdoor: {type: 'or', items: []},
					price: {
						min: 0,
						max: 50000,
						range: [0, 50000],
						format: '{value} ₽'
					},
					dates: {
						start: new Date(),
						end: new Date()
					}
				},
				dayRouteItems: []
			}
		},
		components: {
		  	VueSlider: window['vue-slider-component']
		},
		watch: {
			myRouteTitle: {
				handler: function(v) {
					console.log(v)
					//qstore.updateLS()
				}
			},
			myRouteSelectedDay: {
				handler: function(v) {
					this.drawMap()
				}
			},
			myRouteDates: {
				deep: true, 
				handler: function(v) {
					if(!v.start || !v.end) return
					const diffInMs = new Date(v.end) - new Date(v.start)
					const diffInDays = diffInMs / (1000 * 60 * 60 * 24)
					console.log(diffInDays + 1)
					//qstore.setMyRouteDates({start: v.start, end: v.end})
					//qstore.setMyRouteDaysObj(diffInDays + 1)
				}
			},
			mapRouteMode(v) {
				try {
					this.drawMap()
					//this.activeRoute = drawRoute(getRoutePoints(this.pageItems, this.myRouteStartPoint), this.myRouteStartPoint, v)
				} catch(e) {
					console.log(e)
				}
			},
			myRoutePlanItems: {
				handler: function(v) {
					qstore.updateLS()
				},
				deep: true
			},
			myRouteItems: {
				deep: true,
				handler: function(v) {
					qstore.updateLS()
				}
			},
			itemsToWatch: {//myRouteItems
				deep: true,
				handler: function(v, ov) {
					console.log({v, ov})
					try {
						if(this.isPageItemsLoaded) {
							const itemsInfo = []
							v.forEach(async function(e) {
								//console.log('drawitem', {e})
								const itemsToDraw = e.items
								const data = await drawRoute(getRoutePoints(itemsToDraw, this.myRouteStartPoint), this.myRouteStartPoint, this.mapRouteMode, true)
								itemsInfo.push({...data, date_id: e.date_id})
								
							})
							
							this.dayRouteItems = itemsInfo
							console.log('route log', this.dayRouteItems)
							this.drawMap()
							//qstore.updateLS()
							//this.activeRoute = drawRoute(getRoutePoints(itemsToDraw, this.myRouteStartPoint), this.myRouteStartPoint, this.mapRouteMode)
							//qstore.setMyRouteItems(v)
						}
					} catch(e) {
						console.log(e)
					}
				}
			},
			myRouteStartPoint: {
				deep: true,
				handler: function(v) {
					try {
						qstore.setMyRouteStartPoint(v)
						this.drawMap()
						//this.activeRoute = drawRoute(getRoutePoints(this.pageItems, v), this.myRouteStartPoint, this.mapRouteMode)
					} catch(e) {
						console.log(e)
					}
				}
			}
		}, 
		methods: {
			getItemObjectType(layout_id) {
				if(objectTypes[layout_id]) return objectTypes[layout_id].name
				return ''
			},
			generateRouteQuizDateFormat(inputValue) {
				let dateText = ' Дата/время'
				return dateText
				if(inputValue.start && inputValue.end) {
					dateText = new Date(inputValue.start).toLocaleString('default', { month: '2-digits', day: 'numeric' }) + '/' + new Date(inputValue.end).toLocaleString('default', { month: '2-digits', day: 'numeric' })
				}
				return dateText
			},
			generateMyRouteRecommendations() {
				const planRecsIds = this.myRoutePlanItems.reduce((a, b) => {
					if(b.field_recommendations) {
						const bRecs = b.field_recommendations.split(',').map(e => e.trim())
						if(bRecs.length) a.push(...bRecs)
					}
					return a
				}, [])
				
				const uniquePlanRecsIds = Array.from(new Set(planRecsIds))
				const recsItems = window.SEARCH_ITEMS.filter(e => {
					return uniquePlanRecsIds.includes(e.item_data.id)
				}).map(e => e.item_data)
				
				if(recsItems.length) {
					this.myRouteRecommendations = recsItems
					this.$nextTick().then(() => {
						new Splide('.vsearch-recs-slider-main', {
						  	type: 'loop',
						  	perPage: 2,
							pagination: false,
						  gap: '8px',
						  autoHeight: true
						}).mount();			  
					})
				}
				console.log('generateMyRouteRecommendations', recsItems)
			},
			setMyRouteTitle: debounce(function(evt) {
				qstore.setMyRouteTitle(evt.target.value)
			},1000),
			moveItemToDay(item, fromDay, toDay = false) {
				qstore.moveItemToDay(item, fromDay, toDay)
			},
			myRouteDayAddItem(item, dayId = false) {
				//console.log(dayId, item)
				qstore.addItemToMyRouteForced(item, dayId)
			},
			getMyRouteDayDuration(dayItems = [], dayRouteDuration = 0) {
				const myRouteItemsDuration = dayItems.reduce((a, b) => a + (b.field_event_duration ? Number(b.field_event_duration) : 0), 0)
				if(this.activeRoute.common.duration.value) {
					const fullTime = (myRouteItemsDuration * 60 * 60 + dayRouteDuration) / 60 / 60
					const hours = Math.trunc(fullTime)
					const minutes = Math.round(((fullTime - hours) % 1) * 60)
					return `${hours}ч ${minutes}мин` 
				}
				return myRouteItemsDuration
			},
			dayRouteInfoOnMount() {
				const itemsInfo = []
				this.myRouteItems.forEach(async function(e) {
					const itemsToDraw = e.items
					const data = await drawRoute(getRoutePoints(itemsToDraw, this.myRouteStartPoint), this.myRouteStartPoint, this.mapRouteMode, true)
					itemsInfo.push({...data, date_id: e.date_id})

				})
				this.dayRouteItems = itemsInfo
				this.drawMap()
			},
			getDayRouteInfo(day, isNeedPaths = false) {
				//console.log(day)
				const data = {
					distance: 0,
					items: day.items.length,
					durationText: '',
					fullText: ''
				}
				
				const item = this.dayRouteItems.find(e => e.date_id == day.date_id)
				if(item) {
					if(isNeedPaths) {
						const paths = item.paths.map(m => {
							m.fullText = `${m.distance}, ${m.duration.text}`
							return m
						})
						return item.paths
					} else {
						data.distance = item.common.distance
						data.durationText = this.getMyRouteDayDuration(day.items, item.common.duration.value)
						data.fullText = `${this.getMyRouteDayDuration(day.items, item.common.duration.value)}, ${data.distance}`
					}
				}
				//console.log(this.drawMap(false))
				return data
			},
			setMyRouteSelectedDay(dayIndex) {
				if(this.myRouteSelectedDay == dayIndex) {
					this.myRouteSelectedDay = null
				} else {
					this.myRouteSelectedDay = dayIndex
				}
			},
			drawMap(dontDraw = false) {
				try {
					this.activeRoute = drawRoute(getRoutePoints(this.itemsToDraw, this.myRouteStartPoint), this.myRouteStartPoint, this.mapRouteMode, dontDraw)
				} catch(e) {
					console.log(e)
				}
			},
			resetMyRouteDates() {
				qstore.setMyRouteDates({start: null, end: null})
			},
			openPlanItemDayList(item) {
				item.isDayListOpened = true
				console.log(item)
			},
			closePlanItemDayList(event, item = null) {
				console.log(event, item)
				//console.log('closePlanItemDayList')
				//const item = this.myRoutePlanItems.find(e => e.isDayListOpened == true)
				if(item) {
					//item.isDayListOpened = false
				}
			},
			setMyRouteDays() {
				if(!this.myRouteDates.start || !this.myRouteDates.end) return
				const diffInMs = new Date(this.myRouteDates.end) - new Date(this.myRouteDates.start)
				const diffInDays = diffInMs / (1000 * 60 * 60 * 24)
				//console.log(diffInDays + 1)
				qstore.setMyRouteDates(this.myRouteDates)
				qstore.setMyRouteDaysObj(diffInDays + 1)
			},
			getDateText(date) {
				return new Date(date).toLocaleString('default', { month: 'long', day: 'numeric' })
			},
			myRouteItemWorkLoadBarData(item) {
				return item.field_event_workload_graph.find(e => e.name == item.field_event_workload_selected_day).chartData
			},
			myRouteItemSetWorkLoadBarDay(item, wlObj) {
				item.field_event_workload_selected_day = wlObj.name
			},
			setMyRouteStartPoint(item) {
				this.myRouteStartPoint = item
				this.isMyRouteStartPointsListActive = false
			},
			addItemToMyRoutePlan(item) {
				console.log('addItemToMyRoutePlan')
				qstore.addItemToMyRoutePlan(item)
			},
			addItemToMyRouteFromPlan(item, dateId) {
				console.log('addItemToMyRouteFromPlan')
				qstore.addItemToMyRouteFromPlan(item, dateId)
				item.isDayListOpened = false
			},
			removeItemFromMyRoutePlanByID(itemId) {
				console.log('removeItemFromMyRoutePlanByID')
				qstore.removeItemFromMyRoutePlanByID(itemId)
			},
			removeItemFromMyRouteByID(itemId) {
				console.log('removeItemFromMyRouteByID')
				qstore.removeItemFromMyRouteByID(itemId)
			},
			myRouteStartPointsListActiveClickOutside() {
				if(this.isMyRouteStartPointsListActive) this.isMyRouteStartPointsListActive = false
			},
			myRouteItemImgSrc(item) {
				//console.log(item.field_gallery)
				if(item && Array.isArray(item.field_gallery) && item.field_gallery.length > 0) return `/site/data/images/medium/${item.field_gallery[0]}`
				return `/site/data/images/medium/${item.field_image}`
			},
			myRouteItemPriceText(price) {
				if(price === 0) return 'бесплатно'
				if(price > 0) return `от ${price} ₽`
				return ''
			},
			myRouteItemWorkloadClass(percent) {
				if(percent) {
					let pc = Number(percent)
					if(pc > 0 && pc < 30) {
						return 'workload-icon--low'
					}
					if(pc >= 30 && pc < 70) {
						return 'workload-icon--md'
					}
					if(pc >= 70) {
						return 'workload-icon--high'
					}
				}
				return 'workload-icon--low'
			},
			myRouteItemWorkloadText(percent) {
				if(percent) {
					let pc = Number(percent)
					if(pc > 0 && pc < 30) {
						return 'свободно'
					}
					if(pc >= 30 && pc < 70) {
						return 'средняя загруженность'
					}
					if(pc >= 70) {
						return 'тесно'
					}
				}
				return 'свободно'
			},
			myRouteItemDurationText(duration) {
				if(!duration) return ''
				return `+ ${duration} ч.`
			},
			switchHeatmap() {
				if(window.heatmap) {
					if(this.isHeatmapShowed) {
						window.heatmap.options.set('opacity', 0)
						this.isHeatmapShowed = false
					} else {
						window.heatmap.options.set('opacity', 1)
						this.isHeatmapShowed = true
					}
				}
			},
			myRouteItemSwitchWorkLoad(item) {
				item.field_event_workload_show_graph = !item.field_event_workload_show_graph
			},
			scrollToList() {
				jQuery('html, body').animate({
					scrollTop: jQuery(window).height() * 0.75
				}, 500)
			},
			generateFakeRoute() {
				const _this = this
				
				let res = window.SEARCH_ITEMS
				let days = 1
				
				const badLayouts = ['17', '51']
				
				res = res.filter(e => {
					let isItemGenerated = !!Number(e.item_data.field_is_not_generated)
					return e.item_data.layout_id != '17' && e.item_data.layout_id != '51' && e.item_data.path.includes('/vdnh') && !isItemGenerated
				})
				
				if(this.generateRouteQuizSelectedOptions.tags.items.length) {
					res = res.filter(e => {
						return e.item_data.field_tags.split(',').map(t => t.trim().toLowerCase()).some(x => {
							return _this.generateRouteQuizSelectedOptions.tags.items.map(a => {
								return a.trim().toLowerCase()
							}).includes(x)
						})
					})
				}
				
				if(this.generateRouteQuizSelectedOptions.dates.start && this.generateRouteQuizSelectedOptions.dates.end) {
					const diffInMs = new Date(this.generateRouteQuizSelectedOptions.dates.end) - new Date(this.generateRouteQuizSelectedOptions.dates.start)
					const diffInDays = diffInMs / (1000 * 60 * 60 * 24)
					days = diffInDays + 1
				}
				
				
				
				qstore.setMyRouteDates(this.generateRouteQuizSelectedOptions.dates)
				qstore.setMyRouteDaysObj(days, true)
				
				const shuffledRes = res.sort(() => Math.random() > 0.5 ? true : false)
				console.log('shuffledRes', shuffledRes.length)
				this.myRouteItems.forEach(function(day, dayIndex) {
					try {
						const itemsToAdd = shuffledRes.splice(dayIndex * 5, 5).map(e => e.item_data)
						itemsToAdd.forEach(item => {
							qstore.addItemToMyRouteForced(item, day.date_id)
						})
					} catch(e) {
						console.log(e)
					}
				})
				
				this.isGenerateRouteQuizShowed = false
				
				
			},
			generateRoute() {
				const _this = this
				//let res = nestedFilter(window.SEARCH_ITEMS.map(e => e.item_data), this.generateRouteQuizSelectedOptions)
				
				let res = window.SEARCH_ITEMS
				
				const badLayouts = ['17', '51']
				
				res = res.filter(e => {
					let isItemGenerated = !!Number(e.item_data.field_is_not_generated)
					return e.item_data.layout_id != '17' && e.item_data.layout_id != '51' && e.item_data.path.includes('/vdnh') && !isItemGenerated
				})
				//console.log('init', res)
				
				if(this.generateRouteQuizSelectedOptions.tags.items.length) {
					res = res.filter(e => {
						return e.item_data.field_tags.split(',').map(t => t.trim().toLowerCase()).some(x => {
							return _this.generateRouteQuizSelectedOptions.tags.items.map(a => {
								return a.trim().toLowerCase()
							}).includes(x)
						})
					})
				}
				//console.log('tags', res)
				
				if(this.generateRouteQuizSelectedOptions.paid.items.length) {
					if(this.generateRouteQuizSelectedOptions.paid.items[0] === 0) {
						res = res.filter(e => {
							return Number(e.item_data.field_prices) == 0
						})
					}
					if(this.generateRouteQuizSelectedOptions.paid.items[0] === 1) {
						res = res.filter(e => {
							return Number(e.item_data.field_prices) > 0
						})
					}
				}
				
				if(this.generateRouteQuizSelectedOptions.stime.items.length) {
					res = findRouteCombs(res, this.generateRouteQuizSelectedOptions.stime.items[0], this.generateRouteQuizSelectedOptions.tags.items)
				}
				
				if(this.generateRouteQuizSelectedOptions.food.items.length) {
					if(this.generateRouteQuizSelectedOptions.food.items[0] === 1) {
						const restaurants = window.SEARCH_ITEMS.filter(e => e.item_data.layout_id == 51 && e.item_data.path.includes('/vdnh') && !e.item_data.field_is_not_generated)
						res.splice(1, 0, restaurants[Math.floor(Math.random() * restaurants.length)])
					}
				}
				
				console.log('gen', res.map(e => e.item_data))
				
				//qstore.replaceMyRouteItems(res.map(e => e.item_data))
				/*
				this.$nextTick(() => {
					_this.pageItems.forEach(e => {
					    console.log(e)
						const sampleWorkLoadData = JSON.parse(JSON.stringify(barsSampleData))
						e.field_event_workload_show_graph = false
						e.field_event_workload_selected_day = 'ПН'
						e.field_event_workload_graph = randomizeBarData(sampleWorkLoadData)
						
					})
				
				})
				*/
				
				//this.isGenerateRouteQuizShowed = false
			}
		},
		computed: {
		  	myRouteTitleInputSize() {
				console.log(this.myRouteTitle)
				return this.myRouteTitle ? this.myRouteTitle.length : 5
			},
			totalBudget() {
				return this.myRouteItems.reduce((a, b) => {
					const budget = b.budget.reduce((ba, bb) => {
						ba += bb.price ? Number(bb.price) : 0
						return ba
					}, 0)
					const tickets = b.items.reduce((ba, bb) => {
						ba += bb.field_prices ? Number(bb.field_prices) : 0
						return ba
					}, 0)
					a += tickets + budget
					return a
				}, 0)
			},
		  	itemsToWatch() {
				return this.myRouteItems.map(e => ({items: e.items, date_id: e.date_id}))
			},
		    itemsToDraw() {
				let myRouteItems = this.myRouteItems
				if(this.myRouteSelectedDay !== null) {
					myRouteItems = myRouteItems.filter((e,i) => i == this.myRouteSelectedDay)
				}
				return myRouteItems.reduce((a,b) => {
					a.push(...b.items)
					return a
				}, [])
			},
			filteredTags() {
				return this.autocompleteItems.filter(i => {
					return i.text.toLowerCase().indexOf(this.tag.toLowerCase()) !== -1;
				})
			},
			isRouteGenerationEnabled() {
				return true
				if(this.generateRouteQuizSelectedOptions.stime.items.length && this.generateRouteQuizSelectedOptions.tags.items.length > 0) return true
				return false
			},
			myRouteFullDurationText() {
				const myRouteItemsDuration = this.pageItems.reduce((a, b) => a + (b.field_event_duration ? Number(b.field_event_duration) : 0), 0)
				if(this.activeRoute.common.duration.value) {
					const fullTime = (myRouteItemsDuration * 60 * 60 + this.activeRoute.common.duration.value) / 60 / 60
					const hours = Math.trunc(fullTime)
					const minutes = Math.round(((fullTime - hours) % 1) * 60)
					return `${hours}ч ${minutes}мин` 
				}
				return myRouteItemsDuration
			},
			myRoutePaidItems() {
				return this.pageItems.filter(e => e.field_prices > 0)
			},
			myRoutePaidLink() {
				if(this.myRoutePaidItems.length > 0) {
					const baseURL = 'https://vdnh.ru/selections/kupit-bilet/?show_ticket_widget=Y&tickets='
					const ticketsIDs = this.myRoutePaidItems.map(e => e.field_vdnh_tickets).join()
					return baseURL + ticketsIDs
				}
				return '#'
			},
			myRouteStartPointText() {
				if(this.myRouteStartPoint) return this.myRouteStartPoint.name
				return 'Откуда построить маршрут?'
			},
			myRoutePointsCountText() {
				let count = this.pageItems.length
				if(count == 1) {
					return count + ' точка'
				}
				if(count > 1 && count < 5) {
					return count + ' точки'
				}
				if(count > 4) {
					return count + ' точек'
				}
				return count
			},
			pointList: {
				get() {
					//console.log(qstore.state.myRoute.items)
					//return qstore.state.myRoute.items
				},
				set(value) {
					//console.log(value.map(e => e.field_header))
					//qstore.setMyRouteItems(value)
				}
			}
		},
		async mounted() {
			
			const vm = this
		
			this.pageItems = qstore.state.myRoute.items
			//this.myRoutePlanItems = qstore.state.myRoute.planItems.map(e => {
			//	return Object.assign(e, {isDayListOpened: false})
			//})
			this.myRoutePlanItems.forEach(e => {
				e.isDayListOpened = false
			})
			this.myRouteItems = qstore.state.myRoute.routeItems
			//this.myRouteDates = qstore.state.myRoute.dates
			this.generateMyRouteRecommendations()
			
			this.pageItems.forEach(e => {
				const sampleWorkLoadData = JSON.parse(JSON.stringify(barsSampleData))
				e.field_event_workload_show_graph = false
				e.field_event_workload_selected_day = 'ПН'
				e.field_event_workload_graph = randomizeBarData(sampleWorkLoadData)
				if(!Array.isArray(e.field_gallery)) {
					let gl = e.field_gallery ? e.field_gallery : ''
					let regex = /\/medium\/(.*?)\.(jpg|png)/g;
					let matches_imgs = gl.match(regex);

					let items = []
					if(matches_imgs) {
						items = matches_imgs.map(m => m.replace('/medium/', ''))
					}
					e.field_gallery = items
				}
			})
			this.$nextTick(() => vm.isPageItemsLoaded = true)
		
			await ymaps.ready(['Heatmap'])
			initMap2()
			this.drawMap()
			this.dayRouteInfoOnMount()
			//this.activeRoute = drawRoute(getRoutePoints([], this.myRouteStartPoint), this.myRouteStartPoint, this.mapRouteMode)
			//drawRoute([[55.830572, 37.631125], 'ВДНХ, Сиреневая аллея'])
		}
	})

	function getRandomItem(items = [], r) {
		const badIds = r.map(e => e.item_data.id)
		const arr = items.filter(e => !badIds.includes(e.item_data.id))
		console.log(arr)
		if(arr.length > 0) {
			const res = arr[Math.floor(Math.random() * items.length)]
			//if(r.find(e => e.item_data.id == res.item_data.id)) getRandomItem(items, r)
			return res
		}
		return false
	}

	function findRouteCombs(items, time, tags = []) {
		const r = []
		
		if(items.length) {
			const chunks = {}
			
			tags.forEach(t => {
				const chunk = items.filter(e => {
					const itemTags = e.item_data.field_tags.split(',').map(t => t.trim().toLowerCase())
					const selectedTag = t.toLowerCase()
					return itemTags.some(x => x == selectedTag)
				})
				
				chunks[t] = chunk
			})
			
			const timeChunks = []
			const chunksKeys = Object.keys(chunks)
			
			for(let i = 0; i < time; i++) {
				if(i >= chunksKeys.length) {
					timeChunks.push(shuffleArray(chunksKeys)[0])
				} else {
					timeChunks.push(chunksKeys[i])
				}
			}
			
			console.log({timeChunks})
			
			for(let key of timeChunks) {
				if(chunks[key].length) {
					const randomItem = getRandomItem(chunks[key], r)
					if(randomItem) {
						const timeSum = r.reduce((acc, b) => {
							return acc += Number(b.item_data.field_event_duration)
						}, 0) + Number(randomItem.item_data.field_event_duration)
						
						r.push(randomItem)
					}
				}
			}
		}
		
		return r
	}

	function feefee(items = []) {
		const f = (n, s, c, r=[], i=0)=>{for(s?0:c[r.join()]=r;i<n.length;)f(n,s-n[i],c,[n[i],...r].sort(),++i)}
		let res = {}
		f([1,2,3,4,5,6,7,8,9,10], 12, res)
		console.log('feefee', res)
	}

	feefee()

	function filterItemsByUniqueLayout(items) {
		return items.filter((value, index, self) => {
		  	return self.findIndex(v => v.actor.name === value.actor.name) === index;
		})
	}

	function nestedFilter(targetArray, filters) {
		let filterKeys = Object.keys(filters)
		return targetArray.filter(function(item) {
			return filterKeys.every(function(filterKey) {
				
				if (!item.filters.hasOwnProperty(filterKey) && filters[filterKey].items.length != 0) {
					return false
				}
				
				if (!filters[filterKey].items.length) {
					return true
				}
				
				switch(filters[filterKey].type) {
					case 'and': 
						return filters[filterKey].items.every(e => {
							let itemFilterItemsToLowerCase = item.filters[filterKey].map(n => n.toLowerCase())
							let filtersFilterItemToLowerCase = e.toLowerCase()
							return itemFilterItemsToLowerCase.includes(filtersFilterItemToLowerCase)
						})
						break;
					case 'or': 
						return filters[filterKey].items.some(e => {
							let itemFilterItemsToLowerCase = item.filters[filterKey].map(n => n.toLowerCase())
							let filtersFilterItemToLowerCase = e.toLowerCase()
							return itemFilterItemsToLowerCase.includes(filtersFilterItemToLowerCase)
						})
						break;
					default: 
						break;
				}
			})
		})
	}

	function generateFilters(data) {
		let gen = data.map(e => {
			if(!e.field_prices || isNaN(Number(e.field_prices))) {
				e.field_prices = 0
			} else {
				e.field_prices = Number(e.field_prices)
			}
			if(e.field_filters) {
				let splittedFilters = e.field_filters.split(';')
				let arr = []
				let parsedFilters = splittedFilters.forEach(b => {
					let sp = b.split(':')
					
					if(sp.length == 2) {
						let og = [filtersVoc[sp[0].trim()], sp[1].split(',').map(n => n.trim())]
						arr.push(og)
					}
				})
				let obj = Object.fromEntries(arr)
				//console.log(obj)
				return Object.assign(e, {filters: obj})
			}
			return Object.assign(e, {filters: {}})
		})
		return gen
	}

	function shuffleArray(arr) {
		return arr.sort((a,b) => 0.5 - Math.random());
	}

	function randomizeBarData(chartData) {
		const newData = [...chartData].map(e => {
			e.chartData.datasets[0].data = shuffleArray(e.chartData.datasets[0].data)
			
			e.chartData.datasets[0].backgroundColor = []
			
			e.chartData.datasets[0].data.forEach(x => {
				let color = '#99D31E'
				if(x > 30 && x < 70) {
					color = '#ffb800'
				}
				if(x >= 70) {
					color = '#f91942'
				}
				e.chartData.datasets[0].backgroundColor.push(color)
			})
			
			return e
		})
		//console.log(newData)
		return newData
	}
	
	function drawRoute(points = [], isWithStartPoint = false, routeMode = 'pedestrian', dontDraw = false) {
		try {
			if(!window.vdnhMap) {
				console.log('no map')
				initMap2()
			}

			let multiRoute = new ymaps.multiRouter.MultiRoute({
				referencePoints: points,
				params: {
					routingMode: 'pedestrian'
				}
			}, {
				//wayPointIconPreset: 'islands#redCircleIcon',
        		wayPointIconFillColor: "#f91942",
				wayPointStartIconFillColor: "#f91942",
				wayPointFinishIconFillColor: "#f91942",
				//viaPointIconFillColor: "#333333",
				//wayPointStartIconLayout: 'islands#blueCircleIcon',
				boundsAutoApply: true,
				routeActiveMarkerVisible: false,
				routeOpenBalloonOnClick: false
			})
			
			multiRoute.model.setParams({ routingMode: routeMode }, true);
 
			let routeData = {
				paths: [],
				common: {
					distance: '',
					duration: ''
				}
			}

			multiRoute.model.events.add('requestsuccess', function() {
				try {
					let activeRoute = multiRoute.getActiveRoute();
					let activeRoutePaths = activeRoute.getPaths(); 

					console.log({activeRoute})
					
					routeData.common.distance = activeRoute.properties.get("distance") ? activeRoute.properties.get("distance").text : ''
					routeData.common.duration = activeRoute.properties.get("duration")

					activeRoutePaths.each(function(path) {
						console.log(path.properties)
						routeData.paths.push({distance: path.properties.get("distance").text, duration: path.properties.get("duration")})
					})

					const walkPreset = {
						strokeWidth: 3,
						strokeColor: "#336af7",
						strokeStyle: "dot"
					}

					const startPreset = {
						strokeWidth: 3,
						strokeColor: "#f91942",
						strokeStyle: "dot"
					}

					for (let i = 0; i < activeRoute.getPaths().getLength(); i++) {
						const way = activeRoute.getPaths().get(i)
						const segments = way.getSegments()
						for (let j = 0; j < segments.getLength(); j++) {
							//console.log(i)
							if(!!isWithStartPoint && i == 0) {
								segments.get(j).options.set({ preset: startPreset })
							} else {
								segments.get(j).options.set({ preset: walkPreset })
							}
						}
					}

					const routePoints = multiRoute.getWayPoints()

					for(let i = 0; i < routePoints.getLength(); i++) {
						const wayPoint = routePoints.get(i)
						if(!!isWithStartPoint) {
							if(i == 0) {
								wayPoint.options.set({
									preset: "islands#redCircleIcon",
									iconContentLayout: ymaps.templateLayoutFactory.createClass(
										`<span class="vmap-point vmap-point--start" style="font-family: 'Rubik', sans-serif;">S</span>`
									)
								})
							} else {
								wayPoint.options.set({
									preset: "islands#blueCircleIcon",
									iconContentLayout: ymaps.templateLayoutFactory.createClass(
										`<span class="vmap-point vmap-point--${i}" style="font-family: 'Rubik', sans-serif;">${i}</span>`
									)
								})
							}
						} else {
							wayPoint.options.set({
								preset: "islands#blueCircleIcon",
								iconContentLayout: ymaps.templateLayoutFactory.createClass(
									`<span class="vmap-point vmap-point--${i + 1}" style="font-family: 'Rubik', sans-serif;">${i + 1}</span>`
								)
							})
						}
					}
				} catch(e) {
					console.log(e)
				}
				
			})
			if(!dontDraw) {
				console.log()
				vdnhMap.geoObjects.removeAll()
				vdnhMap.geoObjects.add(multiRoute)
			}
			return routeData
		} catch(e) {
			console.log(e)
		}
	}
	/*
	ymaps.modules.require(['Heatmap'], function (Heatmap) {
		 var data = {
			  type: 'FeatureCollection',
			  features: [{
				  id: 'id1',
				  type: 'Feature',
				  geometry: {
					  type: 'Point',
					  coordinates: [37.782551, -122.445368]
				  }
			  }, {
				  id: 'id2',
				  type: 'Feature',
				  geometry: {
					  type: 'Point',
					  coordinates: [37.782745, -122.444586]
				  }
			  }]
		  },
		 heatmap = new Heatmap(data);
		 heatmap.setMap(vdnhMap);
	});
	*/
	
	async function initMap2() {
		console.log('map init2')
		window.vdnhMap = new ymaps.Map('vdnhmap', {
			center: [55.830572, 37.631125],
			zoom: 15,
			controls: ['zoomControl']
		}, {
			buttonMaxWidth: 300
		})
		
		const data = [[53.201445,50.100463],[53.206859,50.126356],[53.187634,50.091078],[53.192819,50.104424],[53.188804,50.089531],[53.208222,50.114417],[53.199811,50.10473],[53.191514,50.107246],[53.188087,50.099061],[53.188303,50.097615],[53.188426,50.098038],[53.199978,50.105987],[53.199978,50.105987],[53.204773,50.117782],[53.209812,50.138558],[53.20076,50.098603],[53.191611,50.107317],[53.192301,50.094866],[53.192123,50.095423],[53.187494,50.089225],[53.188471,50.089881],[53.202621,50.112491],[53.202228,50.142652],[53.220016,50.16297],[53.194102,50.096349],[53.19549,50.10217],[53.312146,50.180613],[53.19369,50.078326],[53.25194,50.166633],[53.401735,50.119008],[53.344943,50.144201],[53.419151,50.053281],[53.19549,50.10217],[53.210164,50.11834],[53.212677,50.145232],[53.216569,50.135042],[53.200575,50.099878],[53.193786,50.095995],[53.189906,50.090904],[53.204058,50.111039],[53.189791,50.082047],[53.215904,50.132277],[53.205966,50.117959],[53.186435,50.095572],[53.204463,50.111429],[53.251052,50.222563],[53.192922,50.094373],[53.202746,50.103302],[53.19364,50.095622],[53.205533,50.144545],[53.188117,50.110105],[53.189782,50.09197],[53.18887,50.103292],[53.198745,50.113149],[53.193553,50.110488],[53.473311,49.912102],[53.209255,50.115653],[53.277942,50.237488],[53.205889,50.110191],[55.746209,37.580435],[55.789562,37.74772],[55.7916,37.748208],[55.78507,37.623982],[55.789875,37.749397],[55.741842,37.56686],[55.790489,37.747047],[55.791744,37.748619],[55.753926,37.556422],[55.822391,37.647131],[55.838925123039,37.626190461722],[55.82907903,37.62834299],[55.82907903,37.62834299],[55.835078576371,37.621895312114],[55.832749492873,37.626987220951],[53.415605,50.017765],[53.415605,50.017765],[53.415605,50.017765],[55.815852,37.676688],[55.835098,37.621829],[55.82907903,37.62834299],[55.828720332498,37.631385818836],[55.831002217649,37.63258820582],[55.832749492873,37.626987220951],[55.828733661367,37.629502906771],[55.827716323755,37.626822175131],[55.838925123039,37.626190461722],[55.83926941,37.6222626],[55.837848191914,37.615467007219],[55.835744980485,37.614349056786],[55.833072293919,37.611642572749],[55.83397258,37.62657005],[55.832978260687,37.619370996031],[55.831339981478,37.618995127147],[55.83533326,37.62579238],[55.82720148192,37.637284093589],[55.833972559488,37.628077720867],[55.828429238045,37.626500581967],[55.834580023783,37.613752187742],[55.82805480654,37.627645343893],[55.83851434,37.62668806],[55.832575359725,37.631631507874],[55.8379641,37.62566328],[55.830984577153,37.633852604368],[55.834797189359,37.62052202741],[55.836458768369,37.622419468747],[55.835307674463,37.621499812052],[55.836993699953,37.624312498133],[55.829974021782,37.61993294266],[55.836178555765,37.614897389018]];

		
		window.heatmap = new ymaps.Heatmap(data, {
			// Радиус влияния.
			radius: 50,
			// Нужно ли уменьшать пиксельный размер точек при уменьшении зума. False - не нужно.
			dissipating: false,
			// Прозрачность тепловой карты.
			opacity: 0.8,
			// Прозрачность у медианной по весу точки.
			intensityOfMidpoint: 0.2,
			// JSON описание градиента.
			gradient: {
				0.1: 'rgba(128, 255, 0, 0.7)',
				0.2: 'rgba(255, 255, 0, 0.8)',
				0.7: 'rgba(234, 72, 58, 0.9)',
				1.0: 'rgba(162, 36, 25, 1)'
			}
		});
		heatmap.options.set('opacity', 0)
		heatmap.setMap(vdnhMap);
		
	}
	
	function getRoutePoints(items = [], start = null) {
		let res = []
		
		if(start) {
			if(start.coords.length == 2) {
				res.push(start.coords)
			} else {
				res.push(start.address)
			}
		}
		
		res = [...res, ...items
			.filter(e => {
				//nsole.log(e.id, e.field_coords)
				if(e.field_coords && e.field_coords.split(',').map(x => Number(x.trim())).length == 2) return true
				console.log('No coords: ', e.id)
				return false
			})
			.map(e => {
				return e.field_coords.split(',').map(x => Number(x.trim()))
			})
		]
		//console.log(res)
		return res
	}
	
	function initMap() {
		console.log('map init')
		// Задаём точки мультимаршрута.
		var pointA = [55.830572, 37.631125],
			pointB = 'ВДНХ, Сиреневая аллея',//[55.834322, 37.630242],
			pointC = [55.835515, 37.623168]
			/**
			 * Создаем мультимаршрут.
			 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/multiRouter.MultiRoute.xml
			 */
		let multiRoute = new ymaps.multiRouter.MultiRoute({
			referencePoints: [
				pointA,
				pointB,
				pointC
			],
			params: {
				//Тип маршрутизации - пешеходная маршрутизация.
				routingMode: 'pedestrian'
			}
		}, {
			// Автоматически устанавливать границы карты так, чтобы маршрут был виден целиком.
			boundsAutoApply: true
		});

		// Создаем кнопку.

		// Создаем карту с добавленной на нее кнопкой.
		window.vdnhMap = new ymaps.Map('vdnhmap', {
			center: [55.830572, 37.631125],
			zoom: 15,
			controls: ['zoomControl']
		}, {
			buttonMaxWidth: 300
		});

		// Добавляем мультимаршрут на карту.
		vdnhMap.geoObjects.add(multiRoute);
	}
	
	function parseObject(str, d = {}) {
		try {
			if(str) {
				return JSON.parse(str)
			}
			return d
		} catch(e) {
			console.log(e)
			return d
		}
	}
	
})